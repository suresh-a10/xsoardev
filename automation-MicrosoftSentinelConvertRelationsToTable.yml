comment: This script is used to convert relations to a table.
commonfields:
  id: MicrosoftSentinelConvertRelationsToTable
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 1.5.46
    packID: AzureSentinel
    packName: Microsoft Sentinel
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.83255
engineinfo: {}
mainengineinfo: {}
name: MicrosoftSentinelConvertRelationsToTable
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('MicrosoftSentinelConvertRelationsToTable', 'start', __line__())
  ### pack version: 1.5.46


  from itertools import chain


  def format_relation(relation: dict) -> dict:
      """
      Converts a relation to a dictionary with the relevant fields.
      """
      return {
          'name': relation.get('name'),
          'relatedResourceKind': relation.get('properties', {}).get('relatedResourceKind'),
          'relatedResourceType': relation.get('properties', {}).get('relatedResourceType'),
          'relatedResourceName': relation.get('properties', {}).get('relatedResourceName'),
          'relatedResourceId': relation.get('properties', {}).get('relatedResourceId')
      }


  def convert_to_table(context_results: str) -> CommandResults:
      """
      Args:
          context_results (str): String representing a list of dicts

      Returns:
          CommandResults: CommandResults object containing only readable_output
      """
      context_results = json.loads(context_results)

      context_formatted = [
          format_relation(relation) for relation in context_results
      ]

      md = tableToMarkdown(
          '',
          context_formatted,
          headers=[*dict.fromkeys(chain.from_iterable(context_formatted))],
          removeNull=True,
          sort_headers=False,
          headerTransform=pascalToSpace
      )

      return CommandResults(
          readable_output=md
      )


  def main():  # pragma: no cover
      context = dict_safe_get(
          demisto.callingContext,
          ['context', 'Incidents', 0, 'CustomFields', 'microsoftsentinelrelations'],
          {}
      )

      if not context:
          return_error('No data to present')

      return_results(convert_to_table(context))


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('MicrosoftSentinelConvertRelationsToTable', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
