comment: Automation to display drilldown search results from Splunk.
commonfields:
  id: SplunkShowDrilldown
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 3.1.37
    packID: SplunkPy
    packName: Splunk
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.14.95956
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SplunkShowDrilldown
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SplunkShowDrilldown', 'start', __line__())
  demisto.debug('pack name = Splunk, pack version = 3.1.37')




  def main():
      drilldown_results = []
      incident = demisto.incident()
      if not incident:
          raise ValueError("Error - demisto.incident() expected to return current incident "
                           "from context but returned None")

      labels = incident.get('labels', [])
      for label in labels:
          if label.get('type') == 'successful_drilldown_enrichment':
              is_successful = label.get('value')
              if is_successful == 'false':
                  return CommandResults(readable_output='Drilldown enrichment failed.')
          if label.get('type') == 'Drilldown':
              try:
                  drilldown_results = json.loads(label.get('value', []))
              except Exception as e:
                  raise ValueError(f'Drilldown is not in a valid JSON structure:\n{e}')

      if not drilldown_results:
          return CommandResults(readable_output='Drilldown was not configured for notable.')

      if isinstance(drilldown_results, list):
          if 'query_name' in drilldown_results[0]:
              # Get drilldown results of multiple drilldown searches
              markdown = "#### Drilldown Searches Results\n"

              for drilldown in drilldown_results:
                  markdown += f"**Query Name:** {drilldown.get('query_name','')}\n\n **Query"\
                      f"Search:**\n{drilldown.get('query_search','')}\n\n **Results:**\n"

                  if drilldown.get('enrichment_status') == 'Enrichment failed':
                      markdown += "\nDrilldown enrichment failed."

                  elif results := drilldown.get("query_results", []):
                      markdown += tableToMarkdown("", results, headers=results[0].keys())

                  else:
                      markdown += "\nNo results found for drilldown search."

                  markdown += "\n\n"

          else:
              # Drilldown results of a single drilldown search
              markdown = tableToMarkdown("", drilldown_results, headers=drilldown_results[0].keys())

      else:
          markdown = tableToMarkdown("", drilldown_results)

      return {'ContentsFormat': formats['markdown'], 'Type': entryTypes['note'], 'Contents': markdown}


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      try:
          return_results(main())
      except Exception as e:
          return_error(f'Got an error while parsing Splunk events: {e}', error=e)

  register_module_line('SplunkShowDrilldown', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
