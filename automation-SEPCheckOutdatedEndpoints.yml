args:
- default: true
  description: AV Definitions version to check against.
  name: requiredavdefversion
  required: true
comment: Check if any endpoints are using an AV definition that is not the latest
  version.
commonfields:
  id: SEPCheckOutdatedEndpoints
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.1.11
    packID: SymantecEndpointProtection
    packName: Symantec Endpoint Protection
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - sep-client-content
dockerimage: demisto/python3:3.10.13.83255
engineinfo: {}
mainengineinfo: {}
name: SEPCheckOutdatedEndpoints
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SEPCheckOutdatedEndpoints', 'start', __line__())
  demisto.debug('pack name = Symantec Endpoint Protection, pack version = 1.1.11')


  import time


  def parseSepAvDef(s, res):
      import re
      VERSIONS_REGEX = r'([^ ]*) [^\d]*(\d*)'
      v = -1.0
      d = ''
      try:
          m = re.match(VERSIONS_REGEX, s)
          d = m.group(1)  # type: ignore
          v = float(m.group(2))  # type: ignore
          return d, v
      except Exception as ex:
          res.append({"Type": entryTypes["error"], "ContentsFormat": formats["text"],
                      "Contents": "Error occurred while parsing AV Def version. "
                                  "Exception info:\n" + str(ex) + "\n\nInvalid input:\n" + str(s)})
          demisto.results(res)
          sys.exit()


  def check_outdated_endpoints():
      res: list = []
      reqAvDef = demisto.get(demisto.args(), 'requiredavdefversion')
      strReqDate, reqVer = parseSepAvDef(reqAvDef, res)
      reqDate = time.strptime(strReqDate, '%m/%d/%Y')

      resp = demisto.executeCommand('sep-client-content', {})
      if isError(resp[0]):
          demisto.results(resp)
      else:
          data = demisto.get(resp[0], 'Contents.clientDefStatusList')
          outdated = []

          for row in data:
              strRowDate, rowVer = parseSepAvDef(row['version'], res)
              rowDate = time.strptime(strRowDate, '%Y-%m-%d')
              if rowDate < reqDate or rowVer < reqVer:
                  outdated.append(row)

          if outdated:
              res.append("yes")
              txtSEPOutdatedVersions = 'Outdated versions found:\n' + \
                  '\n'.join(['%d endpoints using version %s' % (row['clientsCount'], row['version']) for row in outdated])
              demisto.setContext('txtSEPOutdatedVersions', txtSEPOutdatedVersions)
              md = tblToMd('Outdated endpoints', outdated)
              res.append({'ContentsFormat': formats['markdown'], 'Type': entryTypes['note'], 'Contents': md})
          else:
              res.append("no")
              demisto.setContext('txtSEPOutdatedVersions', '')
              res.append({"Type": entryTypes["note"], "ContentsFormat": formats["text"],
                          "Contents": "All endpoints are up to date."})
      demisto.results(res)


  def main():  # pragma: no cover
      try:
          check_outdated_endpoints()
      except Exception as e:
          err_msg = f'Encountered an error while running the script: [{e}]'
          return_error(err_msg, error=e)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('SEPCheckOutdatedEndpoints', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- sep
- symantec
type: python
