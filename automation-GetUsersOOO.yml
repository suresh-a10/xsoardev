args:
- defaultValue: OOO List
  description: The name of the out-of-office list. Default is "OOO List".
  name: listname
comment: Retrieves users who are currently out of the office. The script use the OutOfOfficeListCleanup
  script to remove users from the out-of-office list whose 'off until day' is in the
  past.
commonfields:
  id: GetUsersOOO
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 1.3.12
    packID: ShiftManagement
    packName: Shift Management
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.83255
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetUsersOOO
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GetUsersOOO', 'start', __line__())
  ### pack version: 1.3.12



  def main():
      # get current time
      now = datetime.now()
      # args
      list_name = demisto.getArg("listname")
      if not list_name:
          list_name = 'OOO List'

      # update list name to start with 'OOO', so we can't overwrite other lists with this
      if not list_name.startswith("OOO"):
          list_name = f"OOO {list_name}"

      # clean the out of office list
      ooo_cleanup_res = demisto.executeCommand("OutOfOfficeListCleanup", {"listName": list_name})
      if isError(ooo_cleanup_res):
          return_error(f'Failed to cleanup OOO list: {str(get_error(ooo_cleanup_res))}')

      # get the out of office list, check if the list exists, if not create it:
      ooo_list = demisto.executeCommand("getList", {"listName": list_name})[0]["Contents"]

      get_users_response = demisto.executeCommand('getUsers', {})
      if is_error(get_users_response):
          return_error(f'Failed to get users: {str(get_error(get_users_response))}')

      users_list = get_users_response[0]['EntryContext']['DemistoUsers']

      if any(ele in ooo_list for ele in ["Item not found", 'null']):
          users_list = []
      else:
          # get ooo users
          ooo_users = []
          list_data = json.loads(ooo_list)
          for item in list_data:
              if item.get('offuntil'):
                  off_until = datetime.strptime(item['offuntil'], '%Y-%m-%d')
                  if off_until > now:
                      ooo_users.append(item.get('user'))

          # keep only ooo users in users_list
          users_list = list(filter(lambda x: x['username'] in ooo_users, users_list))

      if users_list:
          hr = 'Out of office Team members\n' + tableToMarkdown('', users_list)
      else:
          hr = 'Out of office Team members\nNo team members are out of office today.'

      return_results({
          'Type': entryTypes['note'],
          'ContentsFormat': formats['markdown'],
          'Contents': hr,
          'EntryContext': {'ShiftManagment.OOOUsers': users_list}
      })


  if __name__ in ('__builtin__', 'builtins', '__main__'):
      main()

  register_module_line('GetUsersOOO', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Shift Management
- widget
type: python
