args:
- auto: PREDEFINED
  defaultValue: scatter
  description: The type of the widget to return.
  name: returnWidgetType
  predefined:
  - scatter
  - summary
  - incidents
- defaultValue: 1 months ago
  description: 'The start date by which to filter incidents. Date format will be the
    same as in the incidents query page, for example: "3 days ago", ""2019-01-01T00:00:00
    +0200").'
  name: fromDate
- defaultValue: "500"
  description: The maximum number of incidents to fetch.
  name: limit
- defaultValue: Cortex XDR Incident
  description: The Cortex XDR incident type.
  name: incidentType
- description: Input search query from the dashboard.
  name: searchQuery
- defaultValue: "24"
  description: Period of time (in hours) before retraining the model. Default is "24".
  name: modelExpiration
  predefined:
  - ""
- auto: PREDEFINED
  defaultValue: "False"
  description: Determines whether to force the model to re-train. Default is "False".
  name: forceRetrain
  predefined:
  - "True"
  - "False"
- defaultValue: xdralerts.osactorprocesscommandline,xdralerts.actionprocessimagecommandline,xdralerts.causalityactorprocesscommandline,xdralerts.actorprocesscommandline,xdralerts.description
  description: Comma-separated list of additional incident fields to display, but
    which will not be taken into account when computing similarity.
  name: fieldsToDisplay
comment: Train clustering model on Cortex XDR incident type.
commonfields:
  id: DBotGroupXDRIncidents
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.2.0
    itemVersion: 6.1.98
    packID: CortexXDR
    packName: Cortex XDR by Palo Alto Networks
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.115186
engineinfo: {}
mainengineinfo: {}
name: DBotGroupXDRIncidents
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('DBotGroupXDRIncidents', 'start', __line__())
  demisto.debug('pack name = Cortex XDR by Palo Alto Networks, pack version = 6.1.98')


  ''' STANDALONE FUNCTION '''


  def get_group_incidents(args: dict) -> dict:
      model_name = 'xdr_clustering'
      field_for_grouping = 'xdralerts'
      field_for_name = 'xdralerts.causalityactorprocessimagename'

      return_type = args['returnWidgetType']
      demisto.debug(f'DBotGroupXDRIncidents: {return_type=}')

      if return_type == 'incidents':
          res = demisto.executeCommand('DBotShowClusteringModelInfo', {
              'searchQuery': demisto.args().get('searchQuery'),
              'modelName': model_name,
              'returnType': 'incidents',
              'fieldsToDisplay': demisto.args().get('fieldsToDisplay')
          })
          return res
      elif return_type == 'summary':
          res = demisto.executeCommand('DBotShowClusteringModelInfo', {
              'modelName': model_name
          })
          return res
      else:
          res = demisto.executeCommand('DBotTrainClustering', {
              'modelName': model_name,
              'type': args.get('incidentType'),
              'fromDate': args.get('fromDate'),
              'limit': args.get('limit'),
              'fieldsForClustering': field_for_grouping,
              'fieldForClusterName': field_for_name,
              'storeModel': 'True',
              'searchQuery': args.get('searchQuery'),
              'forceRetrain': args.get('forceRetrain'),
              'numberOfFeaturesPerField': 500
          })
          if not res[-1].get('EntryContext', {}):
              demisto.debug(f"DBotGroupXDRIncidents: there are 0 incidents fetched. {res[-1].get('Contents', '')=} "
                            f"{res[-1].get('EntryContext', {})=}")
              res[-1]['Contents'] = {'data': []}
          # we need only the last entry because it's a widget script, and only the widget info should be return
          return res[-1]


  ''' MAIN FUNCTION '''


  def main():
      try:
          args = demisto.args()
          return_results(get_group_incidents(args))
      except Exception as ex:
          return_error(f'Failed to execute DBotGroupXDRIncidents. Error: {str(ex)}')


  ''' ENTRY POINT '''

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('DBotGroupXDRIncidents', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- widget
timeout: 3.6Âµs
type: python
