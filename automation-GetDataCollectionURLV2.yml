args:
- description: The data collection task ID.
  name: task_id
  required: true
- description: The array of users the data collection task was sent to, or that you
    want to send to (If using by task only)
  isArray: true
  name: users
  required: true
comment: |-
  Generates the URL for a Data Collection Task into Context.  Can be used to get the url for tasks send via Email, Slack, or even if you select "By Task Only".

  To generate links for specific users, add an array of users in the users argument.
commonfields:
  id: 49beb76f-6d41-4c5a-80a6-02e2e0622ad7
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.5.31797
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetDataCollectionURLV2
outputs:
- contextPath: DataCollectionURL.url
  description: The data collection URL
  type: String
- contextPath: DataCollectionURL.task
  description: The task ID for the generated URL
- contextPath: DataCollectionURL.user
  description: The user for which the data collection link was generated
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GetDataCollectionURLV2', 'start', __line__())


  from base64 import b64encode
  from typing import Dict, Any


  def encode_string(value: str) -> str:
      b64 = b64encode(value.encode('ascii'))
      return b64.hex()


  def get_data_collection_url(task_id: str, users: List[str]) -> List[Dict[str, str]]:
      demisto_urls = demisto.demistoUrls()
      server_url = demisto_urls.get('server', '')
      incident_id = demisto.incident().get('id')
      task = f'{incident_id}@{task_id}'
      encoded_task = encode_string(task)
      urls = []

      for user in users:
          encoded_user = encode_string(user)
          urls.append({
              'user': user,
              'task': task,
              'url': f'{server_url}/#/external/form/{encoded_task}/{encoded_user}'
          })
      return urls

  def get_data_collection_url_command(args: Dict[str, Any]) -> CommandResults:
      task_id = args.get('task_id', None)
      if not task_id:
          raise ValueError('task_id not specified')

      users = argToList(args.get('users', []))
      if not users:
          raise ValueError('users not specified')

      result = get_data_collection_url(task_id, users)

      return CommandResults(
          outputs_prefix='DataCollectionURL',
          outputs_key_field='user',
          outputs=result,
          ignore_auto_extract=True
      )


  def main():
      try:
          return_results(get_data_collection_url_command(demisto.args()))
      except Exception as ex:
          return_error(f'Failed to execute GetDataCollectionURL. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('GetDataCollectionURLV2', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- collection
- url
type: python
