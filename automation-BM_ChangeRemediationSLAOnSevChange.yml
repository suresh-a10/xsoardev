args:
- auto: PREDEFINED
  description: The old value of the field that was changed.
  name: old
  predefined:
  - Low
  - Medium
  - High
  - Critical
- auto: PREDEFINED
  description: The new value of the field that was changed.
  name: new
  predefined:
  - Low
  - Medium
  - High
  - Critical
comment: |-
  Changes the remediation SLA once a change in incident severity occurs.
  This is done automatically and the changes can be configured to your needs.
commonfields:
  id: ed7f2d01-ff1f-4920-804b-6266cc6d152a
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: BM_ChangeRemediationSLAOnSevChange
pswd: ""
runas: DBotRole
runonce: false
script: |
  register_module_line('ChangeRemediationSLAOnSevChange', 'start', __line__())
  ### pack version: 1.12.16



  from datetime import datetime, timedelta
  import time

  # ##### Help #####
  # This is an example script. The script is used to change the Remediation SLA of an incident,
  # when the severity of the incident changes for any reason. Please copy this script and make changes to your liking.
  # The Configuration section is there to help you easily configure the script with your desired SLAs.

  # The CRITICAL_SLA field defines the number of minutes that you would want an incident with critical severity to have,
  # in its Remediation SLA field.
  # The NONCRITICAL_SLA field defines the number of days that you would want an incident with non-critical severity to have,
  # in its Remediation SLA field.
  # The NONCRITICAL_SLA field can also be configured in minutes if you want.

  # Note that the SLA can be set with a number that represents minutes instead of days, like so:
  # demisto.executeCommand("setIncident",{'sla': 30, "slaField":"remediationsla"})
  # but it can also be set with a number that represents a complete date and time structure, like so:
  # demisto.executeCommand("setIncident",{'sla': 2018-12-26T12:10:24Z, "slaField":"remediationsla"})
  # To get the date+time structure, you can use timedelta, like so: newsla = now + datetime.timedelta(days=2)
  # then, you would use this to convert it to the date+time structure that can be passed to the SLA field:
  # newsla = newsla.strftime('%Y-%m-%dT%H:%M:%S+00:00')

  # Since this script is to be triggered by a change of a field,
  # you may want to make use of the changes to the field in your script.
  # For example, in this case, when the severity of an incident is changed, we want to check if it is now critical, or not.
  # We do this by using demisto.args()['new'], to get the new value of the severity.
  # The field changes can be obtained in the following way:
  # The name of the triggered field is in: demisto.args()['name']
  # The field's old value is in: demisto.args()['old']
  # The field's new value is in: demisto.args()['new']
  # To print the whole argument structure, use this: demisto.results(demisto.args())


  # ##### Configuration #####
  CRITICAL = 60  # In minutes
  HIGH = 240 # In minutes
  MEDIUM = 1440
  LOW = 2880
  NONCRITICAL = 6  # In days

  SEVERITYTIME={'Critical': 60,'High':240,'Medium':1440,'Low': 2880}
  SEVERITYDICT={'Critical':1,'High':2,'Medium':3,'Low':4}




  def main():
      # ##### Logic #####
      #args_sev == "High":

      args_sev = demisto.args().get('new')
      args_sev_old = demisto.args().get('old')
      return_results(args_sev_old)
      return_results(args_sev)
      result=SEVERITYDICT[args_sev_old]-SEVERITYDICT[args_sev]
      return_results(result)
      invid=demisto.investigation()['id']
      print("id=",invid)
      incident=demisto.incident().get(invid)
      res=demisto.executeCommand("stopTimer", {"timerField":"remediationsla"})
      print(res)
      time.sleep(20)
      print(demisto.executeCommand("getIncidents", {'id':invid})[0]['Contents']['data'][0]['CustomFields']['remediationsla'])
      duration=demisto.executeCommand("getIncidents", {'id':invid})[0]['Contents']['data'][0]['CustomFields']['remediationsla']['totalDuration']
      print(duration)
      print(duration//60)


      if result <0:
          print("forward")
          timers=SEVERITYDICT[args_sev_old]-SEVERITYTIME[args_sev]
          demisto.executeCommand("resetTimer", {"timerField":"remediationsla"})
          demisto.executeCommand("setIncident", {'sla': timers, "slaField": "remediationsla"})
          demisto.executeCommand("startTimer", {"timerField":"remediationsla"})

      else:
          print("Backward")
          timers=SEVERITYDICT[args_sev_old]+SEVERITYTIME[args_sev]
          demisto.executeCommand("resetTimer", {"timerField":"remediationsla"})
          demisto.executeCommand("setIncident", {'sla': timers, "slaField": "remediationsla"})
          demisto.executeCommand("startTimer", {"timerField":"remediationsla"})



  if __name__ in ['__main__', 'builtin', 'builtins']:
      main()

  register_module_line('ChangeRemediationSLAOnSevChange', 'end', __line__())
scripttarget: 0
subtype: python3
tags:
- field-change-triggered
- example
type: python
