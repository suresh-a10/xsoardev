args:
- description: The login admin's password.
  name: password
  required: true
  secret: true
- description: The login admin's username.
  name: username
  required: true
- description: The relevant app's ID from the app studio.
  name: app_id
- description: The email of the user who will get permissions to create a meeting.
  name: identity
comment: This script grants a user the permissions needed to create a Teams meeting.
  It connects to MS Teams, creating an application access policy to a chosen application
  and then grants a user permissions.
commonfields:
  id: ConfigureAzureApplicationAccessPolicy
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 1.5.9
    packID: MicrosoftTeams
    packName: Microsoft Teams
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/powershell-teams:1.0.0.92908
engineinfo: {}
mainengineinfo: {}
name: ConfigureAzureApplicationAccessPolicy
outputs:
- contextPath: ConfigureAzureApplicationAccessPolicy.Status
  description: Whether the access policy was given.
  type: String
- contextPath: ConfigureAzureApplicationAccessPolicy.Account
  description: The email of the user who received permissions to create a meeting.
  type: String
- contextPath: ConfigureAzureApplicationAccessPolicy.AppID
  description: The relevant app's ID from the app studio.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |-
  ### pack version: 1.5.9
  Import-Module MicrosoftTeams

  function Main()
  {
      [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingConvertToSecureStringWithPlainText', '')]
      param()
      $dargs = $demisto.Args()
      $plain_username = $dargs.username
      $plain_pass = $dargs.password
      $password = (ConvertTo-SecureString -String $plain_pass -AsPlainText -Force)
      $app_id = $dargs.app_id
      $identity = $dargs.identity
      try
      {
          $credential = New-Object System.Management.Automation.PSCredential($plain_username, $password)

          Connect-MicrosoftTeams -Credential $credential

          New-CsApplicationAccessPolicy -Identity Test-policy -AppIds $app_id
          Grant-CsApplicationAccessPolicy -PolicyName Test-policy -Identity $identity

          $human_readable = "Access policy was given"
          $context = @{
              "ConfigureAzureApplicationAccessPolicy" = @{
                  "Status" = "Access policy was given"
                  "Account" = $identity
                  "AppID" = $app_id
              }
          }

          ReturnOutputs $human_readable $context $null | Out-Null
      }
      finally
      {
          Disconnect-MicrosoftTeams
      }
  }

  if ($MyInvocation.ScriptName -notlike "*.tests.ps1" -AND -NOT$Test)
  {
      Main
  }
scripttarget: 0
system: true
tags: []
type: powershell
