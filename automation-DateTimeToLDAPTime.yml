args:
- default: true
  description: Date/Time String.
  name: value
  required: true
comment: Converts the given time to an LDAP timestamp.
commonfields:
  id: DateTimeToLDAPTime
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.10.0
    itemVersion: 1.3.8
    packID: CommunityCommonScripts
    packName: Community Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.115186
enabled: true
engineinfo: {}
mainengineinfo: {}
name: DateTimeToLDAPTime
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('DateTimeToLDAPTime', 'start', __line__())
  demisto.debug('pack name = Community Common Scripts, pack version = 1.3.8')


  import dateparser


  def convert_time(time_to_convert: Optional[datetime]):
      if time_to_convert:
          # ((current time - epoch start date) in seconds + seconds since 1/1/1601) * 10000000 (to get nanoseconds)
          ldap_time = ((time_to_convert - datetime(1970, 1, 1, tzinfo=timezone.utc)).total_seconds() + 11644473600) * 10000000
          return str(int(ldap_time))
      return time_to_convert


  def main():
      try:
          # Get Args
          args = demisto.args()
          str_utc_time = args['value']  # direct access, since this argument is required

          # Convert UTC time string to a datetime type
          utc_time = dateparser.parse(str_utc_time)

          # Convert to LDAP time
          return_results(convert_time(time_to_convert=utc_time))

      except Exception as e:
          return_error(f'Convert DateTimeToLDAPTime to LDAP Time command failed. Error: {str(e)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('DateTimeToLDAPTime', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- transformer
- date
type: python
