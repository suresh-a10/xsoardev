args:
- description: The table of data.
  isArray: true
  name: table
  required: true
- description: The title of the report.
  name: title
  required: true
- description: The to email address.
  name: to
  required: true
comment: Generate a compliance report via button.
commonfields:
  id: CreatePrismaCloudComputeComplianceReportButton
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.7.8
    packID: PrismaCloudCompute
    packName: Prisma Cloud Compute by Palo Alto Networks
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.113941
enabled: true
engineinfo: {}
mainengineinfo: {}
name: CreatePrismaCloudComputeComplianceReportButton
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('CreatePrismaCloudComputeComplianceReportButton', 'start', __line__())
  demisto.debug('pack name = Prisma Cloud Compute by Palo Alto Networks, pack version = 1.7.8')




  def main():
      args = demisto.args()

      try:
          res = demisto.executeCommand("ConvertTableToHTML", {"table": args.get("table"), "title": args.get("title")})

          if is_error(res):
              raise DemistoException(f'Failed to create compliance report: {str(get_error(res))}')

          html = res[0]["EntryContext"]["HTMLTable"]

          body = f"""
          Hello,

          Please see below the details for the compliance report from Prisma Cloud Compute

          {html}

          - DBot
          """

          res = demisto.executeCommand("send-mail", {"to": args.get("to"), "subject": "IMPORTANT: Prisma Cloud "
                                                                                      "Compute Compliance", "body": body})

          if is_error(res):
              raise DemistoException(f'Failed to create compliance report: {str(get_error(res))}')

          demisto.results(res)
          return_results(CommandResults(
              readable_output=res[0]['Contents']
          ))

      except Exception as e:
          return_error(e)


  if __name__ in ['__main__', '__builtin__', 'builtins']:
      main()

  register_module_line('CreatePrismaCloudComputeComplianceReportButton', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
