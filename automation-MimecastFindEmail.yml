args:
- default: true
  description: The query string xml for the search using Mimecast Unified Search Experience
    (MUSE) - read more on https://community.mimecast.com/docs/DOC-2262, using this
    will override other query arguments.
  name: queryXml
- description: search for this text in api messages.
  name: text
- auto: PREDEFINED
  description: Will no execute the query, but just return the query string builded.
  name: dryRun
  predefined:
  - "true"
  - "false"
- auto: PREDEFINED
  description: Search in specific dates only.
  name: date
  predefined:
  - today
  - yesterday
  - last_week
  - last_month
  - last_year
- description: search emails from date, format 2015-09-21T23:00:00Z.
  name: dateFrom
- description: search emails to date, format 2015-09-21T23:00:00Z.
  name: dateTo
- description: filter on messages to a specific address.
  name: sentTo
- description: filter on messages from a specific address.
  name: sentFrom
- description: search email by subject, will override the text argument.
  name: subject
- auto: PREDEFINED
  description: optional - messages with and without attachments any - messages with
    any attachment documents - messages with doc, dot, docx, docm, dotx, dotm, pdf,
    rtf, html attachments spreadsheets - messages with xls, xlt, xlsx, xlsm, xltx,
    xltm, xlsb, xlam, csv attachments presentations - messages with ppt, pptx, pptm,
    potx, potm, ppam, ppsx, ppsm, sldx, sldm, thms, pps attachments text - messages
    with txt, text, html, log attachments images - messages with jpg, jpeg, png, bmp,
    gif, psd, tif, tiff attachments media - messages with mp3, mp4, m4a, mpg, mpeg,
    avi, wav, aac, wma, mov attachments zips - messages with zip, rar, cab, gz, gzip,
    7z attachments none - No attachments are to be present in the results.
  name: attachmentType
  predefined:
  - optional
  - any
  - documents
  - spreadsheets
  - presentations
  - text
  - images
  - media
  - zips
  - none
- description: search for text in attachments.
  name: attachmentText
- description: search email by text in body, will override the text and subject arguments.
  name: body
- description: Sets the number of results to return per page (default 25).
  name: pageSize
- description: Sets the result to start returning results (default 0).
  name: startRow
- auto: PREDEFINED
  description: Defines if the search should query recently received messages that
    are not fully indexed yet (default false). You can search by mailbox and date
    time across active messages.
  name: active
  predefined:
  - "true"
  - "false"
comment: Find an email across all mailboxes, and return the list of mailboxes where
  the email was found, as well as Yes if the mail was found anywhere or No otherwise.
commonfields:
  id: MimecastFindEmail
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 2.2.6
    packID: Mimecast
    packName: Mimecast
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - mimecast-query
dockerimage: demisto/python3:3.10.13.83255
engineinfo: {}
mainengineinfo: {}
name: MimecastFindEmail
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('MimecastFindEmail', 'start', __line__())
  ### pack version: 2.2.6



  MAILBOXES_CTXKEY = "Mailboxes"


  def main() -> None:
      res = []
      resp = demisto.executeCommand("mimecast-query", demisto.args())

      if isError(resp[0]):
          demisto.results(resp)
      else:
          data = demisto.get(resp[0], "Contents.data")
          if data:
              users = set()
              items = demisto.get(data[0], 'items')
              if isinstance(items, list):
                  for mail in items:
                      users.add(mail['displayto'])

              users = list(users)  # type: ignore
              if users:
                  markdownString = '### Mailboxes with email(s) matching the query:\n'
                  markdownString += "".join(['* ' + s + '\n' for s in users])
                  res.append(
                      {'ContentsFormat': formats['markdown'], 'Type': entryTypes['note'], 'Contents': markdownString})

                  users_str = ','.join([str(s) for s in users])
                  demisto.setContext(MAILBOXES_CTXKEY, users_str)

                  answer = 'yes'
              else:
                  demisto.debug("\nNo relevant mails have been found\n")
                  answer = 'no'
          else:
              demisto.debug("\nNo relevant mails have been found\n")
              answer = 'no'

          res.append({"Type": entryTypes["note"], "ContentsFormat": formats["text"], "Contents": answer})
          demisto.results(res)


  if __name__ in ['__main__', 'builtin', 'builtins']:
      main()

  register_module_line('MimecastFindEmail', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Mimecast
type: python
