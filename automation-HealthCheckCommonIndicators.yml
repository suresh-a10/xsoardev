args:
- description: Define the thresholds.
  name: Thresholds
comment: Reports on common indicators.
commonfields:
  id: HealthCheckCommonIndicators
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 3.0.1
    packID: HealthCheck
    packName: System Diagnostics and Health Check
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.111526
enabled: true
engineinfo: {}
mainengineinfo: {}
name: HealthCheckCommonIndicators
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('HealthCheckCommonIndicators', 'start', __line__())
  demisto.debug('pack name = System Diagnostics and Health Check, pack version = 3.0.1')



  THRESHOLDS = {
      'relatedIndicatorCount': 1000,
  }


  def build_body(tenant_name):
      query = f"account:{tenant_name}" if tenant_name != "" else ""
      body = {
          'page': 0,
          'size': 10,
          'query': f'{query}',
          'sort': [{
              'field': 'relatedIncCount',
              'asc': False,
          }],
          'period': {
              'by': 'day',
              'fromValue': 90,
          }
      }
      return body


  def main(args):
      incident = demisto.incidents()[0]
      tenant_name = incident.get('account')
      account_name = f"acc_{tenant_name}/" if tenant_name != "" else ""
      body = build_body(tenant_name)

      indicator_thresholds = args.get('Thresholds', THRESHOLDS)
      indicator_res = execute_command('core-api-post', {
          'uri': f'{account_name}indicators/search',
          'body': body,
      })

      indicators = indicator_res['response']['iocObjects']

      res = []
      for indicator in indicators:
          if indicator.get('relatedIncCount', 0) > indicator_thresholds['relatedIndicatorCount']:
              res.append({
                  'category': 'Indicators',
                  'severity': 'Low',
                  'description': f'The indicator: "{indicator["value"]}" was found {indicator["relatedIncCount"]} times',
                  'resolution': 'You may consider adding it to the exclusion list',
              })

      results = CommandResults(
          readable_output='HealthCheckCommonIndicators Done',
          outputs_prefix='HealthCheck.ActionableItems',
          outputs=res)

      return results


  if __name__ in ('__main__', '__builtin__', 'builtins'):  # pragma: no cover
      return_results(main(demisto.args()))

  register_module_line('HealthCheckCommonIndicators', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
