comment: This displays the mirrored events status in the offense.
commonfields:
  id: QRadarMirroringEventsStatus
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 2.5.9
    packID: QRadar
    packName: IBM QRadar
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.115186
enabled: true
engineinfo: {}
mainengineinfo: {}
name: QRadarMirroringEventsStatus
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('QRadarMirroringEventsStatus', 'start', __line__())
  demisto.debug('pack name = IBM QRadar, pack version = 2.5.9')



  HTML_TEMPLATE = (
      "</br>"
      "<div style='color:#404142; text-align:center; font-size:17px;'>"
      "{status}"
      "</div>"

      "<div class='editable-field-wrapper' style='text-align:center;'>"
      "{message}"
      "</div>"
      "<div draggable='false' class='section-item-content' style='width: 220px; min-height: 22px; padding-top:10px;'>"
      "<div class='field-wrapper row'>"
      "<div class='header-wrapper'>"
      "<span class='header-value label-text opacity-description ellipsis' title='Last Mirrored Time Stamp'>"
      "Last Mirrored Time Stamp"
      "</span>"
      "</div>"
      "<div class='value-wrapper'>"
      "<span class=''>"
      "<div class='date-field-wrapper small'>"
      "<div class='date-display-value-wrapper'>"
      "<div class='date-display-value'>"
      "{last_mirror_in_time}"
      "</div>"
      "</div>"
      "</div>"
      "</span>"
      "</div>"
      "</div>"
      "</div>"
  )


  def main():
      try:
          incident = demisto.incident()
          custom_fields = incident.get('CustomFields', {})
          last_mirror_in_time = custom_fields.get('lastmirroredtimestamp', None)
          message = custom_fields.get('incomingmirrorerror', '')

          if message == '':
              status = 'Not Started'
          elif message == 'Fetching events has reached events limit in this incident.':
              status = 'Completed and Stopped'
          elif message == 'All available events in the offense were fetched.':
              status = 'Completed'
          elif message == 'In queue.':
              status = 'In Progress'
          else:
              status = 'Failure'

          html = HTML_TEMPLATE.format(status=status, message=message, last_mirror_in_time=last_mirror_in_time)

          return {
              'ContentsFormat': 'html',
              'Type': entryTypes['note'],
              'Contents': html
          }

      except Exception as exp:
          return_error('could not parse QRadar offense', error=exp)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      return_results(main())

  register_module_line('QRadarMirroringEventsStatus', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
