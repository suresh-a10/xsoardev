args:
- description: The Python library you wish to download and archive.
  name: library_name
  required: true
comment: The script downloads a Python library using PIP, archives it, and returns
  the file to the war room.
commonfields:
  id: DownloadAndArchivePythonLibrary
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.10.0
    itemVersion: 1.18.2
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/py3-tools:1.0.0.114656
enabled: true
engineinfo: {}
mainengineinfo: {}
name: DownloadAndArchivePythonLibrary
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('DownloadAndArchivePythonLibrary', 'start', __line__())
  demisto.debug('pack name = Common Scripts, pack version = 1.18.2')



  from pathlib import Path
  import shlex
  import subprocess
  from tempfile import mkdtemp
  import zipfile


  def installLibrary(dir_path: Path, library_name: str) -> str:
      # Install the package using pip
      demisto.debug(f"Running in {dir_path=}, {library_name=}")
      cmd = f'python3 -m pip install --target {dir_path} {library_name}'
      process = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
      stdout, stderr = process.communicate()
      demisto.debug(f"returned code: {process.returncode}")
      if process.returncode != 0:
          raise DemistoException(f"Failed to install the {library_name} library: {stderr.decode('utf-8')}")

      # Create a zip file with maximum compression level
      zip_path = dir_path / (library_name + '.zip')
      with zipfile.ZipFile(zip_path, 'w', compression=zipfile.ZIP_DEFLATED, compresslevel=9) as zip_file:
          for root, _dirs, files in os.walk(dir_path):
              for file in files:
                  demisto.debug(f"{root=}, {file=}")
                  file_path = Path(root) / file
                  # Ensure the folder inside the ZIP file is named 'python'
                  arcname = Path('python') / file_path.relative_to(dir_path)
                  zip_file.write(file_path, arcname=arcname)
                  demisto.debug("Updated file")

      # Read the zip file contents
      with open(zip_path, 'rb') as zip_file:
          zip_content = zip_file.read()

      return fileResult(library_name + '.zip', zip_content)


  def main():
      args = demisto.args()
      library_name = args.get('library_name')
      try:
          dir_path = Path(mkdtemp(prefix='python'))
          demisto.debug("Starting installing library.")
          result = installLibrary(dir_path, library_name)
          return_results(result)

      except Exception as e:
          return_error(f"An error occurred: {str(e)}")


  if __name__ in ('__builtin__', 'builtins'):
      main()

  register_module_line('DownloadAndArchivePythonLibrary', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
- file
type: python
