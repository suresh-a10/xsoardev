comment: Collect data from System Diagnostics tool
commonfields:
  id: 3694e6d5-28f5-4b0d-8a1e-925a4ade343b
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.1.27636
enabled: true
engineinfo: {}
mainengineinfo: {}
name: HealthCheckSystemDiagnostics_copy
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('HealthCheckSystemDiagnostics', 'start', __line__())




  from operator import itemgetter
  import re

  DESCRIPTION = [
      "Large incidents were found",
      "Large Workplans were found",
      "Large investigation context data larger than 1 MB was found, that ,ay slow down playbook execution",
      "Large playbook tasks are used, storing a large amount of data to task inputs and outputs"
  ]

  RESOLUTION = [
      'consider to use quite mode in task settings and Playbook Settings: https://xsoar.pan.dev/docs/playbooks/playbook-settings',
      "Avoid storing unnecessary data to context",

  ]


  def LargeIncidents(account_name):
      largeIncidents = demisto.executeCommand("demisto-api-get", {"uri": f"{account_name}diagnostics/incidentsSize"})[0]['Contents']
      return largeIncidents['response']


  def BigWorkplans(account_name):
      bigWorkplans = demisto.executeCommand("demisto-api-get", {"uri": f"{account_name}diagnostics/bigworkplans"})[0]['Contents']
      return bigWorkplans['response']


  def BigContext(account_name):
      bigContext = demisto.executeCommand("demisto-api-get", {"uri": f"{account_name}diagnostics/invContextSize"})[0]['Contents']
      return bigContext['response']


  def BigTasks(account_name):
      bigTasks = demisto.executeCommand("demisto-api-get", {"uri": f"{account_name}diagnostics/bigtasks"})[0]['Contents']
      return bigTasks['response'][0]['tasksList']


  def FormatSize(size):
      power = 1000
      n = 0
      power_labels = {0: '', 1: 'KB', 2: 'MB', 3: 'GB'}
      while size > power:
          size /= power
          n += 1
      return "{:.2f} {}".format(size, power_labels[n])


  def format_time(time):
      time = datetime.strptime(time[:-4], '%Y-%m-%dT%H:%M:%S.%f')
      newTimeFormat = time.strftime("%Y-%m-%d")
      return newTimeFormat


  def FormatTableAndSet(data, dataSource):
      newFormat = []
      for entry in data:
          newEntry = {}
          # if Playgrount is detected
          if not entry['id'].isdigit():
              entry['id'] = 0
          newEntry['incidentid'] = int(entry['id'])
          if dataSource == "largeIncidents":

              newEntry['size'] = FormatSize(entry['size'])
              newEntry['info'] = "Large Incident"
              newEntry['date'] = format_time(entry['modified'])
              newFormat.append(newEntry)
          elif dataSource == "bigWorkplans":
              newEntry['size'] = FormatSize(entry['workplanSizeBytes'])
              newEntry['info'] = "Big Workplan"
              newEntry['date'] = format_time(entry['created'])
              newFormat.append(newEntry)
          elif dataSource == "bigContext":
              print("ID: ", newEntry['incidentid'], type(newEntry['incidentid']))
              newEntry['size'] = FormatSize(entry['size'])
              newEntry['info'] = "Big Context"
              newEntry['date'] = format_time(entry['modified'])
              newFormat.append(newEntry)
          elif dataSource == "bigTasks":
              taskId = re.match(r"(?P<incidentid>\d+)##(?P<taskid>[\d+])##(?P<pbiteration>-\d+|\d+)", entry['taskId'])
              if taskId is not None:
                  newEntry['details'] = \
                      f"Playbook:{entry['playbookName']},\n TaskName:{entry['taskName']},\n TaskID:{taskId['taskid']}"
                  newEntry['size'] = FormatSize(entry['taskSize'])
                  newEntry['incidentid'] = entry['investigationId']
                  newFormat.append(newEntry)
          else:
              continue
      return newFormat


  incident = demisto.incident()
  account_name = incident.get('account')
  account_name = f"acc_{account_name}/" if account_name != "" else ""


  SystemDiagnosticsResults = {
      "largeIncidents": LargeIncidents(account_name),
      "bigWorkplans": BigWorkplans(account_name),
      "bigContext": BigContext(account_name),
      "bigTasks": BigTasks(account_name)
  }

  out = []
  for key in SystemDiagnosticsResults.keys():
      if key != "bigTasks":
          res = FormatTableAndSet(SystemDiagnosticsResults[key], key)
          SystemDiagnosticsResults[key] = res
          out.extend(res)
      else:
          bigTasksNewFormat = FormatTableAndSet(SystemDiagnosticsResults[key], key)

  actionableItems = []
  if SystemDiagnosticsResults['largeIncidents']:
      actionableItems.append({"category": "DB Analysis", "severity": "High",
                              "description": f"{DESCRIPTION[0]}",
                              "resolution": f"{RESOLUTION[0]}"
                              })

  if SystemDiagnosticsResults['bigWorkplans']:
      actionableItems.append({"category": "DB Analysis", "severity": "High",
                              "description": f"{DESCRIPTION[1]}",
                              "resolution": f"{RESOLUTION[0]}"
                              })

  if SystemDiagnosticsResults['bigContext']:
      actionableItems.append({"category": "DB Analysis", "severity": "High",
                              "description": f"{DESCRIPTION[2]}",
                              "resolution": f"{RESOLUTION[1]}"
                              })

  if SystemDiagnosticsResults['bigTasks']:
      actionableItems.append({"category": "DB Analysis", "severity": "High",
                              "description": f"{DESCRIPTION[3]}",
                              "resolution": f"{RESOLUTION[0]}"
                              })

  sorted_out = sorted(out, key=itemgetter('incidentid'))


  # for i in sorted_out:
  #     print("the type of: ", i, type(i))
  demisto.executeCommand("setIncident", {"healthchecklargeinvestigations": sorted_out})
  demisto.executeCommand("setIncident", {"healthcheckinvestigationswithlargeinputoutput": bigTasksNewFormat})


  results = CommandResults(
      readable_output="HealthCheck System Diagnostics Done",
      outputs_prefix="HealthCheck.ActionableItems",
      outputs=actionableItems
  )

  return_results(results)

  register_module_line('HealthCheckSystemDiagnostics', 'end', __line__())
scripttarget: 0
subtype: python3
tags: []
type: python
