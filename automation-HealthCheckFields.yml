comment: Parsing custom fields to detect indexed fields for risky field types.
commonfields:
  id: HealthCheckFields
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 3.0.3
    packID: HealthCheck
    packName: System Diagnostics and Health Check
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.111526
enabled: true
engineinfo: {}
mainengineinfo: {}
name: HealthCheckFields
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('HealthCheckFields', 'start', __line__())
  demisto.debug('pack name = System Diagnostics and Health Check, pack version = 3.0.3')




  def find_indexed_longText_fields(fields):
      found = []
      for field in fields:
          if (
              field["type"] in RIKEY_TYPES
              and field["unsearchable"] is False
              and field["packID"] == ""
              and field["system"] is False
              and field["name"] != "description"
          ):
              found.append({"fieldname": field["name"], "fieldtype": field["type"]})
      return found


  DESCRIPTION = ["Custom fields which usually contains big data are being indexed, consider not to index it"]

  RESOLUTION = [
      "Navigate to incident field page (Settings > Advanced > Fields), select Field > Edit, "
      "and turn off Make data available for search under the Attributes tab its determines if "
      "the values in these fields are available when searching."
  ]

  RIKEY_TYPES = ["grid", "html", "longText", "markdown", "url"]

  incident = demisto.incidents()[0]
  account_name = incident.get("account")
  account_name = f"acc_{account_name}/" if account_name != "" else ""

  res = demisto.executeCommand("core-api-get", {"uri": f"{account_name}incidentfields"})

  if is_error(res):
      return_error(res[0]["Contents"])
  fields = res[0]["Contents"]["response"]
  found = find_indexed_longText_fields(fields)

  demisto.executeCommand("setIncident", {"healthcheckriskyindexedfields": found})

  action_items = []
  if found:
      action_items.append(
          {
              "category": "Content",
              "severity": "Medium",
              "description": DESCRIPTION[0],
              "resolution": f"{RESOLUTION[0]}",
          }
      )


  results = CommandResults(
      outputs_prefix="HealthCheck.ActionableItems",
      outputs=action_items,
  )

  return_results(results)

  register_module_line('HealthCheckFields', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
