commonfields:
  id: 441d34a9-65d4-4f62-8cfc-12c23b3d474e
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetIOCsXSOARFromTenant_v1
pswd: ""
runas: DBotWeakRole
runonce: false
script: |-
  #tenant_name = "acc_TSTSINGLE"

  query = "type:IP"

  request_uri = "/indicators/search"
  request_body = {"page":0,"size":2,"query":query,"sort":[{"field":"calculatedTime","asc":False}]}

  request_response = demisto.executeCommand("core-api-post", {"uri":request_uri, "body": request_body, "using": "Core REST API_instance_2"})

  iocs_objects = request_response[0]['Contents']['response']['iocObjects']

  new_indicators_list = []

  for indicator in iocs_objects:
      #indicator['account'] = 'acc_TSTACCMT'
      new_indicators_list.append(indicator)
      #indicators_list.append(indicator['value'])

  print(new_indicators_list)

  indicator_verdicts={0:'Unknown',1:'Benign',2:'Suspicious',3:'Malicious'}
  for item in new_indicators_list:
      demisto.results(demisto.executeCommand("createNewIndicator", {"type":item['indicator_type'],"value":item['value'],'verdict':indicator_verdicts[item['score']],'expiration':item['expiration']}))

  """
  for iter1_,iter2_ in zip(batch(new_indicators_list, batch_size=1000),batch(indicators_list, batch_size=1000)):
    indicator = ",".join(iter2_) if len(iter2_) > 1 else iter2_[0]
    demisto.executeCommand("createIndicators", {'indicators': iter1_})
    demisto.executeCommand("Sleep", {"seconds":"5"})
    var = demisto.executeCommand("setIndicators", {"indicatorsValues":indicator,"expiration":expirationtime,"reportedby":"XSOAR"})
    print(var)
  """
scripttarget: 0
subtype: python3
tags: []
type: python
