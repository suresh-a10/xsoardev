args:
- description: First subnet
  name: subnet_one
  required: true
- description: Second subnet
  name: subnet_two
  required: true
comment: An automation script to return subnet collision result
commonfields:
  id: IPCalcCheckSubnetCollision
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.3.6
    packID: CommunityCommonScripts
    packName: Community Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.14.100715
engineinfo: {}
mainengineinfo: {}
name: IPCalcCheckSubnetCollision
outputs:
- contextPath: IPCalc.IP.Collision.subnet1
  description: Collission first subnet
  type: String
- contextPath: IPCalc.IP.Collision.subnet2
  description: Collission second subnet
  type: String
- contextPath: IPCalc.IP.Collision.collision
  description: Collission result
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('IPCalcCheckSubnetCollision', 'start', __line__())
  demisto.debug('pack name = Community Common Scripts, pack version = 1.3.6')





  import ipaddress
  import traceback


  ''' COMMAND FUNCTION '''


  def return_check_collision_command(args: Dict[str, Any]) -> CommandResults:

      subnet1 = ipaddress.IPv4Network(args.get('subnet_one', None), strict=False)
      subnet2 = ipaddress.IPv4Network(args.get('subnet_two', None), strict=False)

      collision_result = subnet1.overlaps(subnet2)

      collision_object = {
          "subnet1": format(subnet1),
          "subnet2": format(subnet2),
          "collision": collision_result
      }

      readable_output = tableToMarkdown(t=collision_object, name='Collision Check')

      return CommandResults(
          outputs_prefix='IPCalc.IP.Collision',
          outputs_key_field='',
          readable_output=readable_output,
          outputs=collision_object,
      )


  ''' MAIN FUNCTION '''


  def main():
      try:
          return_results(return_check_collision_command(demisto.args()))
      except Exception as ex:
          demisto.error(traceback.format_exc())
          return_error(f'Failed to execute IPCalcCheckSubnetCollision. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('IPCalcCheckSubnetCollision', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
