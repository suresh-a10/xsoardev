args:
- name: ids
  required: true
commonfields:
  id: 0c2b0101-b15c-4046-82ee-e1c8bc26bcd8
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: srikanthReturnFields
pswd: ""
runas: DBotWeakRole
runonce: false
script: |+
  import json
  def getIncidents(query):
      incidents = []
      page_number = 0
      while True:
          get_incidents_result = demisto.executeCommand('getIncidents', {'query': query, 'page': page_number})
          incidents_data = get_incidents_result[0]['Contents']['data']
          if incidents_data:
              incidents.extend(incidents_data)
          else:
              incidents_data = []
          page_number += 1
          if len(incidents_data) < 100:
              break

      incidents = incidents[:int(demisto.args().get('max'))] if demisto.args().get('max') else incidents
      return incidents

  #res = demisto.args().get('ids',None)

  #query =  'id: (' + ' '.join(map(str, res)) + ')'

  query = 'id: (' + demisto.args().get('ids',None) + ')'

  incidents = demisto.executeCommand("getIncidents", { 'query': query })[0]['Contents']['data']

  resultset = []
  for incident in incidents:
    resultset.append({
        "id" : incident['id'],
        "type" : incident['type'],
        "playbookId" : incident['playbookId'],
        "sourceInstance" : incident['playbookId'],
        "occurred" : incident['occurred'],
        "created" : incident['created']
    })

  demisto.results(fileResult('resultSet.json', str(json.dumps(resultset))))

scripttarget: 0
subtype: python3
tags: []
type: python
