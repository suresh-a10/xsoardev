args:
- auto: PREDEFINED
  name: days_back
  predefined:
  - "1"
  - "2"
  - "3"
  required: true
commonfields:
  id: a41b71a0-2216-46be-875a-6a577d7651c4
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetAuditLogs
pswd: ""
runas: DBotWeakRole
runonce: false
script: |-
  from datetime import date, timedelta
  import io
  import csv

  # set time back for fetching
  fetch_back_date = date.today() - timedelta(days=int(demisto.args().get("days_back")))
  # fetch_till_date = date.today()
  fetch_from = fetch_back_date.strftime("%Y-%m-%dT00:00:00Z")
  # fetch_till = fetch_till_date.strftime("%Y-%m-%dT00:00:00Z")
  file_date = fetch_back_date.strftime("%Y-%m-%d")


  # body of the request
  body = {
      #'fromDate': fetch_from,
      # "modified":'2017-08-22T00:00:00',
      # 'query': f"modified:>={fetch_from} and modified:{fetch_till}",
      'query': 'modified:>="2023-06-22T00:00:00 +0530" and modified:<="2023-06-24T00:00:00 +0530"',
      'size': 10000
  }

  # get the logs
  res = demisto.executeCommand("demisto-api-post", {"uri":"/settings/audits","body":body,"using":"Core REST API_instance_1"})[0]["Contents"]["response"]

  # set the initial counts
  total = res.get('total', 0)
  audits = res.get('audits', [])
  # count = 1

  # if there are more events than the default size, page through and get them all
  while len(audits) < total:
      body['page'] = count
      res = demisto.executeCommand("demisto-api-post", {"uri":"/settings/audits","body":body})[0]["Contents"]["response"]
      audits.extend(res.get('audits', []))
      count += 1
      # break if this goes crazy, if there are more than 20 pages (4000 events)
      # if count == 20:
      #     break
      if count == 100:
          break

  # write the results to a CSV
  si = io.StringIO()
  cw = csv.writer(si)

  # write header row
  cw.writerow(["Log"])

  # write the rows for each asset
  for audit in audits:
      cw.writerow([audit,])

  # return the file
  data = si.getvalue().strip('\r\n')
  demisto.results(fileResult(f"xsoar-audit-logs-{file_date}.csv", data.encode('utf-8')))

  # return the results
  demisto.results(f"Fetched {len(audits)} audit log events since {fetch_from}")
scripttarget: 0
subtype: python3
tags: []
type: python
