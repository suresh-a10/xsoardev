commonfields:
  id: 13d536ff-e063-4636-8b90-623f11a153d6
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: generate-email-code
pswd: ""
runas: DBotWeakRole
runonce: false
script: |-
  import random


  def get_query_window():
      """
      Check if the user defined the list `XSOAR - Email Communication Days To Query` to give a custom value for the time
      to query back for related incidents. If yes, use this value, else use the default value of 60 days.
      """
      user_defined_time = demisto.executeCommand('getList', {'listName': 'XSOAR - Email Communication Days To Query'})
      if is_error(user_defined_time):
          demisto.debug('Error occurred while trying to load the `XSOAR - Email Communication Days To Query` list. Using'
                        ' the default query time - 60 days')
          return '60 days'

      try:
          query_time = user_defined_time[0].get('Contents')
          return f'{int(query_time)} days'
      except ValueError:
          demisto.error('Invalid input for number of days to query in the `XSOAR - Email Communication Days To Query` '
                        'list. Input should be a number only, representing the number of days to query back.\nUsing the '
                        'default query time - 60 days')
          return '60 days'


  def get_incident_by_query(query):
      """
      Get a query and return all incidents details matching the given query.
      Args:
          query: Query for the incidents that should be returned.
      Returns:
          dict. The details of all incidents matching the query.
      """
      # In order to avoid performance issues, limit the number of days to query back for modified incidents. By default
      # the limit is 60 days and can be modified by the user by adding a list called
      # `XSOAR - Email Communication Days To Query` (see README for more information).
      query_time = get_query_window()

      query_from_date = str(parse_date_range(query_time)[0])

      res = demisto.executeCommand("GetIncidentsByQuery", {"query": query, "fromDate": query_from_date,
                                                           "timeField": "modified", "Contents": "id,status"})[0]
      if is_error(res):
          demisto.results(ERROR_TEMPLATE.format('GetIncidentsByQuery', res['Contents']))
          raise DemistoException(ERROR_TEMPLATE.format('GetIncidentsByQuery', res['Contents']))

      incidents_details = json.loads(res['Contents'])
      return incidents_details



  def get_unique_code():
      """
      Create a 8-digit unique random code that should be used to identify new created incidents.
      """
      code_is_unique = False
      while not code_is_unique:
          code = f'{random.randrange(1, 10 ** 8):08}'
          query = f'emailgeneratedcode: {code}'
          incidents_details = get_incident_by_query(query)
          if len(incidents_details) == 0:
              code_is_unique = True
      return code

  #demisto.results(demisto.executeCommand('setIncident', {'id': demisto.args()['id'], 'customFields': {'emailgeneratedcode': get_unique_code()}}))
  demisto.results(demisto.executeCommand('setIncident', {'customFields': {'emailgeneratedcode': get_unique_code()}}))
scripttarget: 0
subtype: python3
tags: []
type: python
