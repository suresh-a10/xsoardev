args:
- auto: PREDEFINED
  default: true
  defaultValue: predefined-options
  description: The mirroring type. Can be "all", which mirrors everything, "chat",
    which mirrors only chats (not commands), or "none", which stops all mirroring.
  name: form_type
  predefined:
  - predefined-options
  - open-answer
- description: Question (message) to send to the specified team member or channel.
  name: message
- auto: PREDEFINED
  description: Indicates whether to use one-time entitlement or persistent entitlement.
  name: persistent
  predefined:
  - "true"
  - "false"
- defaultValue: "yes"
  description: First reply option (used only for if the form type is "predefined-options").
  name: option1
- defaultValue: "no"
  description: Second reply option  (used only for if the form type is "predefined-options").
  name: option2
- description: A CSV list of additional options (in case more than 2 options are required.
    Used only for if the form type is "predefined-options").
  name: additional_options
- default: true
  description: Team member to which to send the question.
  name: team_member
- description: Task ID of the playbook task to close with the reply. If not provided,
    no playbook task will be closed.
  name: task_id
- description: Channel to which to send the question.
  name: channel
- description: The team in which to mirror the Cortex XSOAR investigation. If not
    specified, the default team configured in the integration parameters will be used.
  name: team
- description: Adaptive card to send to the specified team member or channel.
  name: adaptive_card
comment: Send a team member or channel a question with predefined response options
  on Microsoft Teams. The response can be used to close a task (might be conditional)
  in a playbook.
commonfields:
  id: MicrosoftTeamsAsk
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.5.9
    packID: MicrosoftTeams
    packName: Microsoft Teams
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - Microsoft Teams|||send-notification
dockerimage: demisto/python3:3.11.10.111526
engineinfo: {}
mainengineinfo: {}
name: MicrosoftTeamsAsk
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('MicrosoftTeamsAsk', 'start', __line__())
  demisto.debug('pack name = Microsoft Teams, pack version = 1.5.9')
  from enum import Enum






  class FormType(Enum):
      PREDEFINED_OPTIONS = 'predefined-options'
      OPEN_ANSWER = 'open-answer'


  def main():
      script_arguments: dict = demisto.args()

      team_member: str = script_arguments.get('team_member', '')
      channel: str = script_arguments.get('channel', '')
      team: str = script_arguments.get('team', '')
      using_instance: str = script_arguments.get('using_instance', '')

      if not (team_member or channel):
          raise ValueError('Either team member or channel must be provided.')

      if team_member and channel:
          raise ValueError('Either team member or channel should be provided, not both.')

      persistent: bool = script_arguments.get('persistent', '') == 'true'
      response: list = demisto.executeCommand('addEntitlement', {'persistent': persistent})
      if isError(response[0]):
          demisto.results(response)
          return

      entitlement: str = response[0]['Contents']
      investigation_id: str = demisto.investigation()['id']
      task_id: str = script_arguments.get('task_id', '')
      message_text: str = script_arguments.get('message', '')
      adaptive_card: str = script_arguments.get('adaptive_card', '')

      if message_text and adaptive_card:
          raise ValueError('Provide either message or adaptive card to send, not both.')

      form_type = FormType(script_arguments.get('form_type', FormType.PREDEFINED_OPTIONS.value))
      first_option: str = script_arguments.get('option1', '')
      second_option: str = script_arguments.get('option2', '')
      options: list = [first_option, second_option]
      command_arguments: dict = {}

      if adaptive_card:
          adaptive_card_object: dict = {
              "adaptive_card": json.loads(adaptive_card),
              "entitlement": entitlement,
              "investigation_id": investigation_id,
              "task_id": task_id
          }
          command_arguments["adaptive_card"] = adaptive_card_object
          command_arguments["using"] = using_instance
          command_arguments["using-brand"] = "Microsoft Teams"
      else:
          message: dict = {
              "message_text": message_text,
              "options": options,
              "entitlement": entitlement,
              "investigation_id": investigation_id,
              "task_id": task_id,
              "form_type": form_type.value
          }

          if form_type == FormType.PREDEFINED_OPTIONS:
              additional_options: list = argToList(script_arguments.get("additional_options"))
              options.extend(additional_options)
              message["options"] = options

          command_arguments["message"] = json.dumps(message)
          command_arguments["using"] = using_instance
          command_arguments["using-brand"] = "Microsoft Teams"

      if channel:
          command_arguments["channel"] = channel
          if team:
              command_arguments["team"] = team
      elif team_member:
          command_arguments["team_member"] = team_member

      demisto.debug(f"Calling command 'send-notification' with arguments:\n{command_arguments}")
      demisto.results(demisto.executeCommand('send-notification', command_arguments))


  if __name__ == 'builtins':
      main()

  register_module_line('MicrosoftTeamsAsk', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- microsoftteams
type: python
