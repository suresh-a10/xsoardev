comment: Collect integrations name and count number of engines.
commonfields:
  id: HealthCheckIntegrations
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 3.0.0
    packID: HealthCheck
    packName: System Diagnostics and Health Check
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.111526
enabled: true
engineinfo: {}
mainengineinfo: {}
name: HealthCheckIntegrations
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('HealthCheckIntegrations', 'start', __line__())
  demisto.debug('pack name = System Diagnostics and Health Check, pack version = 3.0.0')



  incident = demisto.incidents()[0]
  accountName = incident.get('account')
  accountName = f"acc_{accountName}" if accountName != "" else ""

  res = demisto.executeCommand(
      "core-api-post",
      {
          "uri": f"{accountName}/settings/integration/search",
          "body": {
              "size": 500
          },
      })[0]["Contents"]["response"]

  enabledInstances = list(filter(lambda x: x['enabled'] == "true", res['instances']))
  enabledInstancesNames = []
  for instance in enabledInstances:
      if instance['name'] in ['testmodule', 'd2']:
          continue
      else:
          enabledInstancesNames.append({'instancename': instance['name']})

  demisto.executeCommand('setIncident', {'healthcheckenabledinstances': enabledInstancesNames})
  demisto.executeCommand('setIncident', {'healthchecknumberofengines': res['engines']['total']})

  register_module_line('HealthCheckIntegrations', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
