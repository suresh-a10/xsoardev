args:
- description: Markdown Text to transform.
  name: text
  required: true
- auto: PREDEFINED
  defaultValue: "True"
  description: If True - The markdown text will be converted to HTML without a Full
    HTML structure.
  name: convertOnlyMarkdown
  predefined:
  - "True"
  - "False"
- auto: PREDEFINED
  defaultValue: "False"
  description: If True - The resulted HTML will be nicely formatted as a Unicode string,
    with a separate line for each tag and each string.
  name: prettifyHTML
  predefined:
  - "True"
  - "False"
comment: Converts Markdown to HTML.
commonfields:
  id: MarkdownToHTML
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.2.0
    itemVersion: 1.3.8
    packID: CommunityCommonScripts
    packName: Community Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/bs4-py3:1.0.0.117152
enabled: true
engineinfo: {}
mainengineinfo: {}
name: MarkdownToHTML
outputs:
- contextPath: MarkdownToHTML.HTML
  description: The HTML converted text.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('MarkdownToHTML', 'start', __line__())
  demisto.debug('pack name = Community Common Scripts, pack version = 1.3.8')

  import markdown  # type: ignore
  from bs4 import BeautifulSoup


  ''' MAIN FUNCTION '''


  def main():
      try:
          args = demisto.args()
          input_text = args["text"]
          input_only_md = argToBoolean(args.get("convertOnlyMarkdown", True))
          input_prettify = argToBoolean(args.get("prettifyHTML", False))

          data = markdown.markdown(input_text)  # converts markdown text to HTML
          if not input_only_md:
              # Add to the converted markdown the full HTML structure
              data = f"<!doctype html><html><head><meta charset=\"utf-8\"></head><body>{data}</body></html>"

          if input_prettify:
              # Format the resulted HTML to a unicode string, with a separate line for each tag and each string.
              soup = BeautifulSoup(data)
              data = soup.prettify()

          # Output the resulted HTML to the context
          res = CommandResults(
              outputs_prefix='MarkdownToHTML',
              outputs_key_field='',
              readable_output=data,
              outputs={'HTML': data})

          return_results(res)

      except Exception as ex:
          return_error(f'Failed to execute MarkdownToHTML. Error: {str(ex)}')


  ''' ENTRY POINT '''
  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('MarkdownToHTML', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- markdown
- HTML
type: python
