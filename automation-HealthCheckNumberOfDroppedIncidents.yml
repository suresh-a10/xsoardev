args:
- auto: PREDEFINED
  default: true
  description: Is widget or playbook command.
  name: isWidget
  predefined:
  - "False"
  - "True"
- description: Define the thresholds.
  name: Thresholds
comment: Number of dropped incidents.
commonfields:
  id: HealthCheckNumberOfDroppedIncidents
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 3.0.1
    packID: HealthCheck
    packName: System Diagnostics and Health Check
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.111526
enabled: true
engineinfo: {}
mainengineinfo: {}
name: HealthCheckNumberOfDroppedIncidents
outputs:
- contextPath: NumberOfDroppedIncidents
  description: Number of dropped incidents.
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('HealthCheckNumberOfDroppedIncidents', 'start', __line__())
  demisto.debug('pack name = System Diagnostics and Health Check, pack version = 3.0.1')




  from datetime import datetime, timedelta


  def buildWidget(totalDropped):
      data = {
          "Type": 17,
          "ContentsFormat": "number",
          "Contents": {
              "stats": totalDropped,
              "params": {
                  "timeFrame": "minutes",
                  "colors": {
                      "isEnabled": True,
                      "items": {"#D13C3C": {"value": 15}},
                  },
              },
          },
      }

      return data


  def createActionItem(totalDropped):
      actionItems = []

      if totalDropped > thresholds["NumberOfDroppedIncidents"]:
          actionItems.append(
              {
                  "category": "Incidents Analysis",
                  "severity": "Low",
                  "description": "Too many dropped incidents",
                  "resolution": "Consider tuning the defined query to avoid fetching unneeded incidents",
              }
          )
      return CommandResults(
          readable_output="HealthCheckFileSysLog Done", outputs_prefix="HealthCheck.ActionableItems", outputs=actionItems
      )


  incident = demisto.incidents()[0]
  accountName = incident.get("account")
  accountName = f"acc_{accountName}/" if accountName != "" else ""

  args = demisto.args()
  Thresholds = {"NumberOfDroppedIncidents": 2000}
  thresholds = args.get("Thresholds", Thresholds)
  isWidget = argToBoolean(args.get("isWidget", True))
  daysAgo = datetime.today() - timedelta(days=30)

  demisto_version: str = get_demisto_version().get("version")
  if not demisto_version:
      return_error("Could not get the version of XSOAR")

  if demisto_version.startswith("6"):  # xsoar 6
      stats = demisto.executeCommand(
          "core-api-post",
          {
              "uri": f"{accountName}settings/audits",
              "body": {"size": 10000, "query": "type:notcreated and modified:>%s" % str(daysAgo.strftime("%Y-%m-%d"))},
          },
      )

      if is_error(stats):
          return_error(f"error occurred when trying to retrieve the audit logs using {args=}, error: {stats}")

      totalDropped = stats[0]["Contents"]["response"]["total"]
      if isWidget is True:
          data = buildWidget(totalDropped)
          return_results(data)
      else:
          results = createActionItem(totalDropped)
          return_results(results)

  else:  # XSOAR V8
      uri = "/public_api/v1/audits/management_logs"
      page_num = 1
      size = 100
      body = {
          "request_data": {
              "search_from": page_num,
              "search_to": size,
              "filters": [
                  {"field": "sub_type", "operator": "in", "value": ["NotCreated - Incident"]},
              ],
          }
      }

      args = {"uri": uri, "body": body}
      stats = demisto.executeCommand("core-api-post", args)
      totalDropped = stats[0]["Contents"]["response"]["reply"]["total_count"]
      if is_error(stats):
          return_error(f"error occurred when trying to retrieve the audit logs using {args=}, error: {stats}")

      if isWidget is True:
          data = buildWidget(totalDropped)
          return_results(data)
      else:
          results = createActionItem(totalDropped)
          return_results(results)

  register_module_line('HealthCheckNumberOfDroppedIncidents', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
