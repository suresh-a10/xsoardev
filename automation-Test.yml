commonfields:
  id: dec23fbd-850a-4547-84f2-cbc512025879
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: localhost/demisto/suresh-custom:latest
enabled: true
engineinfo: {}
mainengineinfo: {}
name: Test
pswd: ""
runas: DBotWeakRole
runonce: false
script: |2+

  from typing import Dict, Any
  import traceback
  import pandas as pd
  from sklearn.model_selection import train_test_split
  from sklearn.linear_model import LinearRegression
  from sklearn.ensemble import RandomForestClassifier
  from sklearn.metrics import accuracy_score
  import joblib

  ''' STANDALONE FUNCTION '''





  ''' MAIN FUNCTION '''


  def main():
      x = np.arange(20).reshape(-1, 1)
      y = np.array([5, 12, 11, 19, 30, 29, 23, 40, 51, 54, 74,62, 68, 73, 89, 84, 89, 101, 99, 106])
      x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=8, random_state=0)
      model = LinearRegression().fit(x_train, y_train)
      print(model.intercept_)


      # try:
      #     lst=["abc","def","ghi"]
      #     res="\n".join(lst)
      #     print(res)
      #     demisto.executeCommand("addToList", {"listName":"DemoList","listData":res})
      # except Exception as ex:
      #     demisto.error(traceback.format_exc())  # print the traceback
      #     return_error(f'Failed to execute BaseScript. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

scripttarget: 0
subtype: python3
tags: []
type: python
