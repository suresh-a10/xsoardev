args:
- description: URL to check
  name: URL
  required: true
- default: true
  defaultValue: "443"
  description: Port to check
  name: Port
comment: Use this automation to check for validity of your SSL certificate and get
  the time until expiration.
commonfields:
  id: SSLVerifier
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.3.6
    packID: CommunityCommonScripts
    packName: Community Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.14.100715
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SSLVerifier
outputs:
- contextPath: SSLVerifier.Certificate.Expiry
  description: Time of expiration
  type: string
- contextPath: SSLVerifier.Certificate.Issuer
  description: Issuer information
  type: string
- contextPath: SSLVerifier.Certificate.Site
  description: Site that was checked
  type: string
- contextPath: SSLVerifier.Certificate.TimeToExpiration
  description: Days to expiration
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SSLVerifier', 'start', __line__())
  demisto.debug('pack name = Community Common Scripts, pack version = 1.3.6')


  import json
  import socket
  import ssl
  from datetime import datetime


  def results_return(command: str, item: dict):
      results = CommandResults(
          outputs_prefix=f'SSLVerifier.{command}',
          outputs_key_field='',
          outputs=item
      )
      return_results(results)


  def get_cert_info(hostname: str, port: str) -> dict:
      data = {}
      ctx = ssl.create_default_context()
      s = ctx.wrap_socket(socket.socket(), server_hostname=hostname)
      s.connect((hostname, int(port)))
      cert: Any = s.getpeercert()
      issuer: str = json.dumps(cert['issuer'])
      jsonissuer = json.loads(
          issuer.replace('\",', '\":').replace('[[[', '{').replace(']]]', '}').replace('[[', '').replace(']]', ''))
      expiration_obj = datetime.strptime(str(cert['notAfter']), '%b %d %H:%M:%S %Y %Z')
      converteddate = datetime.strftime(expiration_obj, '%Y-%m-%dT%H:%M:%S.%fZ')
      now_obj = datetime.now()
      dateresults_obj = expiration_obj - now_obj
      days = int(dateresults_obj.days)
      data['Expiry'] = converteddate
      data['Site'] = hostname
      data['TimeToExpiration'] = f'{days} days'
      data['Issuer'] = jsonissuer['organizationName']
      return data


  def main():
      hostname = demisto.args().get('URL')
      port = demisto.args().get('Port')
      try:
          results_return('Certificate', get_cert_info(hostname, port))
      except Exception as e:
          return_error(f'Error: {e}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('SSLVerifier', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
