args:
- name: IOC
  required: true
comment: To get the top level domain and search for any trusted domain present in
  the domain IOC sent for blocking
commonfields:
  id: fad6d2f6-867f-4fe4-8d1a-0e20b1f8fa07
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetTLD
pswd: ""
runas: DBotWeakRole
runonce: false
script: |+
  str=demisto.args()['IOC']

  TLD = r'([^.\s]+\.[^.\s]+)$'

  print("Available domain  in the Given String Are:")


  domain=re.findall(TLD,str)
  print(domain)

  def listToString(domain):

      # initialize an empty string

      str1 = " "


      return (str1.join(domain))

  res=listToString(domain)

  data=demisto.executeCommand("getList",{"listName":'TCS_Customer_Domain_List'})[0]["Contents"]
  #print(data)

  data1=demisto.executeCommand("getList",{"listName":'TCS_Created_Domain'})[0]["Contents"]


  if res in data or res in data1:
      print("domain is trusted")
      demisto.results(demisto.executeCommand("Set",{'append': 'true', 'key': 'TrustedDomainNew', 'value': str}))
  else:
      print("domain is not trusted")
      demisto.results(demisto.executeCommand("Set",{'append': 'true', 'key': 'NotTrustedDomain', 'value': str}))



scripttarget: 0
subtype: python3
tags: []
type: python
