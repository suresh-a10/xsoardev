args:
- description: Address to use
  name: ip_address
  required: true
comment: An automation script to return address IANA information
commonfields:
  id: IPCalcReturnAddressIANAAllocation
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.3.6
    packID: CommunityCommonScripts
    packName: Community Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.14.100715
engineinfo: {}
mainengineinfo: {}
name: IPCalcReturnAddressIANAAllocation
outputs:
- contextPath: IPCalc.IP.Allocation.allocation
  description: IANA IP allocation type
  type: String
- contextPath: IPCalc.IP.Allocation.address
  description: Address
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('IPCalcReturnAddressIANAAllocation', 'start', __line__())
  demisto.debug('pack name = Community Common Scripts, pack version = 1.3.6')





  import ipaddress
  import traceback


  ''' COMMAND FUNCTION '''


  def return_address_info_command(args: Dict[str, Any]) -> CommandResults:

      ip_address = args.get('ip_address', None)

      address_info = 'unspecified'

      if ipaddress.ip_address(ip_address).is_multicast:
          address_info = 'multicast'
      elif ipaddress.ip_address(ip_address).is_private:
          address_info = 'private'
      elif ipaddress.ip_address(ip_address).is_global:
          address_info = 'global'
      elif ipaddress.ip_address(ip_address).is_reserved:
          address_info = 'reserved'
      elif ipaddress.ip_address(ip_address).is_loopback:
          address_info = 'loopback'
      elif ipaddress.ip_address(ip_address).is_link_local:
          address_info = 'link_local'
      elif ipaddress.ip_address(ip_address). is_unspecified:
          address_info = 'unspecified'

      info_object = {
          "address": ip_address,
          "allocation": address_info
      }

      readable_output = tableToMarkdown(t=info_object, name='Iana Allocation')

      return CommandResults(
          outputs_prefix='IPCalc.IP.Allocation',
          outputs_key_field='',
          readable_output=readable_output,
          outputs=info_object
      )


  ''' MAIN FUNCTION '''


  def main():
      try:
          return_results(return_address_info_command(demisto.args()))
      except Exception as ex:
          demisto.error(traceback.format_exc())
          return_error(f'Failed to execute IPCalcReturnSubnetIANAAllocation. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('IPCalcReturnAddressIANAAllocation', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
