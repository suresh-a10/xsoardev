contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 3.2.4
    packID: Jira
    packName: Atlassian Jira
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
description: "Create Jira issue allows you to open new issues.\nWhen creating the
  issue, you can decide to update based on on the issue's state, which will wait for
  the issue to resolve or close with StatePolling.\nAlternatively, you can select
  to mirror the Jira issue and incident fields.  To apply either of these options,
  set the SyncTicket value in the playbook inputs to one of the following options:
  \n1. StatePolling\n2. Mirror\n3. Leave Blank to use none\n\nWhen creating Jira issues
  through XSOAR, using the mirroring function, make sure that you exclude those issues
  when fetching incidents. To exclude these issues, tag the relevant issues with a
  dedicated label and exclude that label from the JQL query (Labels!=)."
id: Create Jira Issue
inputs:
- description: Set the summary of the ticket.
  key: Summary
  playbookInputQuery: null
  required: true
  value: {}
- description: Set the description of the ticket.
  key: Description
  playbookInputQuery: null
  required: false
  value: {}
- description: Jira Project Key
  key: ProjectKey
  playbookInputQuery: null
  required: true
  value: {}
- description: TaskName
  key: IssueTypeName
  playbookInputQuery: null
  required: true
  value: {}
- description: "Set the value of the desired sync method with Jira Issue. you can
    choose one of three options:\n1. StatePolling\n2. Mirror \n3. Blank for none \n\nGenericPolling
    polls for the state of the ticket and runs until the ticket state is either resolved
    or closed. \n\nMirror - You can use the Mirror option to perform a full sync with
    the Jira Ticket. The ticket data is synced automatically between Jira and Cortex
    xSOAR with the Jira mirror feature.\nIf this option is selected, FieldPolling
    is true by default. "
  key: SyncTicket
  playbookInputQuery: null
  required: false
  value: {}
- description: |-
    Set interval time for the polling to run
    (In minutes)
  key: PollingInterval
  playbookInputQuery: null
  required: false
  value: {}
- description: |-
    Set the amount of time to poll the status of the ticket before declaring a timeout and resuming the playbook.
    (In minutes)
  key: PollingTimeout
  playbookInputQuery: null
  required: false
  value: {}
- description: "In this use case, Additional polling commands are relevant when using
    StatePolling, and there is more than one Jira instance. It will specify the polling
    command to use a specific instance to run on. \nIf so, please add \"Using\" to
    the value. \nThe playbook will then take the instance name as the instance to
    use. "
  key: AdditionalPollingCommandName
  playbookInputQuery: null
  required: false
  value: {}
- description: |
    Set the Jira Instance that will be used for mirroring/running polling commands.
  key: InstanceName
  playbookInputQuery: null
  required: false
  value: {}
- description: "Set the mirror direction, should be one of the following: \n1. In\n2.
    Out\n3. Both"
  key: MirrorDirection
  playbookInputQuery: null
  required: false
  value:
    simple: Both
- description: "Set tags for mirror comments and files to Jira.\nAs defined in the
    instance settings, by default it will be comment for comments mirroring and attachment
    for attachments mirroring. "
  key: MirrorTags
  playbookInputQuery: null
  required: false
  value:
    simple: comment,attachment
- description: |-
    Set the value to true or false to determine if the playbook will execute the FieldPolling sub playbook.
    This is useful when a playbook needs to wait for the Jira ticket to be resolved before continuing the parent playbook.
    FieldPolling will run until the ticket state is either resolved or closed
  key: FieldPolling
  playbookInputQuery: null
  required: false
  value: {}
- description: |
    Add labels to the issue.
  key: IssueLabel
  playbookInputQuery: null
  required: false
  value: {}
name: Create Jira Issue
outputs: []
starttaskid: "0"
system: true
tasks:
  "0":
    continueonerrortype: ""
    id: "0"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "16"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: 18c305f6-5fbf-4423-8b6c-ae7a02d8f74a
      iscommand: false
      name: ""
      version: -1
    taskid: 18c305f6-5fbf-4423-8b6c-ae7a02d8f74a
    timertriggers: []
    type: start
    view: |-
      {
        "position": {
          "x": 50,
          "y": 10
        }
      }
  "3":
    continueonerrortype: ""
    id: "3"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "15"
    note: false
    quietmode: 0
    scriptarguments:
      description:
        complex:
          root: inputs.Description
      issueTypeName:
        complex:
          root: inputs.IssueTypeName
      labels:
        complex:
          root: 'inputs.IssueLabel '
      projectKey:
        complex:
          root: inputs.ProjectKey
      summary:
        complex:
          root: inputs.Summary
      using:
        simple: ${inputs.InstanceName}
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Creates a new issue in Jira.
      id: e764c3a4-f26b-47ee-82e9-1e33da961f15
      iscommand: true
      name: Create Jira issue
      script: '|||jira-create-issue'
      type: regular
      version: -1
    taskid: e764c3a4-f26b-47ee-82e9-1e33da961f15
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 50,
          "y": 545
        }
      }
  "8":
    continueonerrortype: ""
    id: "8"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      id: 50ecfc72-0d3f-4d2e-8f12-d5c7b5627d76
      iscommand: false
      name: Done
      type: title
      version: -1
    taskid: 50ecfc72-0d3f-4d2e-8f12-d5c7b5627d76
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 370,
          "y": 1245
        }
      }
  "9":
    conditions:
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                root: inputs.SyncTicket
          operator: isEqualString
          right:
            value:
              simple: Mirror
      label: Mirror
    - condition:
      - - left:
            iscontext: true
            value:
              complex:
                root: inputs.SyncTicket
          operator: isEqualString
          right:
            value:
              simple: StatePolling
      label: State Polling
    continueonerrortype: ""
    id: "9"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#default#':
      - "8"
      Mirror:
      - "13"
      State Polling:
      - "14"
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Check for a playbook input to indicate which sync mode was selected.
      id: bcb3872c-e94b-47df-87e0-0104d51ebeeb
      iscommand: false
      name: Mirror or State Polling?
      type: condition
      version: -1
    taskid: bcb3872c-e94b-47df-87e0-0104d51ebeeb
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 50,
          "y": 895
        }
      }
  "13":
    continueonerrortype: ""
    id: "13"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    loop:
      exitCondition: ""
      iscommand: false
      max: 100
      wait: 1
    nexttasks:
      '#none#':
      - "8"
    note: false
    quietmode: 0
    scriptarguments:
      'FieldPolling ':
        complex:
          root: inputs.FieldPolling
      FieldPollingInterval:
        complex:
          root: inputs.PollingInterval
      FieldPollingTimeout:
        complex:
          root: inputs.PollingTimeout
      MirrorDirection:
        complex:
          root: inputs.MirrorDirection
      MirrorInstanceName:
        complex:
          root: inputs.InstanceName
      MirrorTags:
        complex:
          root: inputs.MirrorTags
      TicketId:
        complex:
          accessor: Id
          root: Ticket
    separatecontext: true
    skipunavailable: false
    task:
      brand: ""
      description: Mirror Jira Ticket is designed to serve as a sub-playbook, which
        enables ticket mirroring with Jira.
      id: f2d4551f-8dd6-43d3-8850-57a1acf773e1
      iscommand: false
      name: Mirror Jira Ticket
      playbookId: Mirror Jira Ticket
      type: playbook
      version: -1
    taskid: f2d4551f-8dd6-43d3-8850-57a1acf773e1
    timertriggers: []
    type: playbook
    view: |-
      {
        "position": {
          "x": 50,
          "y": 1070
        }
      }
  "14":
    continueonerrortype: ""
    id: "14"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    loop:
      exitCondition: ""
      iscommand: false
      max: 100
      wait: 1
    nexttasks:
      '#none#':
      - "8"
    note: false
    quietmode: 0
    scriptarguments:
      AdditionalPollingCommandName:
        complex:
          root: inputs.AdditionalPollingCommandName
      InstanceName:
        complex:
          root: inputs.InstanceName
      Interval:
        complex:
          root: inputs.PollingInterval
      TicketId:
        complex:
          accessor: Id
          root: Ticket
      Timeout:
        complex:
          root: inputs.PollingTimeout
    separatecontext: true
    skipunavailable: false
    task:
      brand: ""
      description: |-
        Use Jira Incident State Polling as a sub-playbook when required to pause the execution of a master playbook until the Jira ticket state is either resolved or closed.
        This playbook implements polling by continuously running the jira-get-issue command until the state is either resolved or closed.
      id: d513362a-1605-4e4e-8b90-07c1d82f8310
      iscommand: false
      name: Jira Ticket State Polling
      playbookId: Jira Ticket State Polling
      type: playbook
      version: -1
    taskid: d513362a-1605-4e4e-8b90-07c1d82f8310
    timertriggers: []
    type: playbook
    view: |-
      {
        "position": {
          "x": 680,
          "y": 1070
        }
      }
  "15":
    continueonerrortype: ""
    fieldMapping:
    - incidentfield: Jira Status
      output:
        complex:
          accessor: Status
          root: Ticket
    - incidentfield: Jira Summary
      output:
        complex:
          accessor: Summary
          root: Ticket
    - incidentfield: Jira Reporter Name
      output:
        complex:
          accessor: Creator
          root: Ticket
          transformers:
          - args:
              delimiter:
                value:
                  simple: (
            operator: split
          - args:
              index:
                value:
                  simple: "0"
            operator: atIndex
    - incidentfield: Jira Reporter Email
      output:
        complex:
          accessor: Creator
          root: Ticket
          transformers:
          - args:
              delimiter:
                value:
                  simple: (
            operator: split
          - args:
              index:
                value:
                  simple: "1"
            operator: atIndex
          - args:
              limit: {}
              replaceWith: {}
              toReplace:
                value:
                  simple: )
            operator: replace
    - incidentfield: Jira ID
      output:
        complex:
          accessor: Id
          root: Ticket
    - incidentfield: Jira Issue Key
      output:
        complex:
          accessor: Key
          root: Ticket
    id: "15"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      '#none#':
      - "9"
    note: false
    quietmode: 0
    scriptarguments:
      issueId:
        complex:
          accessor: Id
          root: Ticket
      using:
        simple: ${inputs.InstanceName}
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Fetches an issue from Jira.
      id: d1b67f95-6ce5-4ed5-8c45-e51b53567b2d
      iscommand: true
      name: Initial Update Incident with Jira Information
      script: '|||jira-get-issue'
      type: regular
      version: -1
    taskid: d1b67f95-6ce5-4ed5-8c45-e51b53567b2d
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 50,
          "y": 720
        }
      }
  "16":
    continueonerrortype: ""
    id: "16"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      "no":
      - "17"
      "yes":
      - "3"
    note: false
    quietmode: 0
    scriptarguments:
      brandname:
        simple: jira-v2
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Returns 'yes' if integration brand is available. Otherwise returns
        'no'
      id: ca2e71b9-1850-4702-8421-4977e9cbc876
      iscommand: false
      name: Is Jira V2 integration enabled?
      script: IsIntegrationAvailable
      type: condition
      version: -1
    taskid: ca2e71b9-1850-4702-8421-4977e9cbc876
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 50,
          "y": 185
        }
      }
  "17":
    continueonerrortype: ""
    id: "17"
    ignoreworker: false
    isautoswitchedtoquietmode: false
    isoversize: false
    nexttasks:
      "no":
      - "8"
      "yes":
      - "3"
    note: false
    quietmode: 0
    scriptarguments:
      brandname:
        simple: Jira V3
    separatecontext: false
    skipunavailable: false
    task:
      brand: ""
      description: Returns 'yes' if integration brand is available. Otherwise returns
        'no'
      id: 7133c080-325b-4a45-85e2-e9fd1a6b38ca
      iscommand: false
      name: Is Jira V3 integration enabled?
      script: IsIntegrationAvailable
      type: condition
      version: -1
    taskid: 7133c080-325b-4a45-85e2-e9fd1a6b38ca
    timertriggers: []
    type: condition
    view: |-
      {
        "position": {
          "x": 370,
          "y": 370
        }
      }
version: -1
view: |-
  {
    "linkLabelsPosition": {
      "16_3_yes": 0.52,
      "17_8_no": 0.27,
      "9_14_State Polling": 0.64,
      "9_8_#default#": 0.55
    },
    "paper": {
      "dimensions": {
        "height": 1300,
        "width": 1010,
        "x": 50,
        "y": 10
      }
    }
  }
