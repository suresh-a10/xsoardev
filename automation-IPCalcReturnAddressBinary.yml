args:
- description: Address to use
  name: ip_address
  required: true
comment: An automation script to return address in binary format
commonfields:
  id: IPCalcReturnAddressBinary
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.3.8
    packID: CommunityCommonScripts
    packName: Community Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.115186
engineinfo: {}
mainengineinfo: {}
name: IPCalcReturnAddressBinary
outputs:
- contextPath: IPCalc.IP.Binary.binary
  description: Subnet binary
  type: String
- contextPath: IPCalc.IP.Binary.address
  description: IP address
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('IPCalcReturnAddressBinary', 'start', __line__())
  demisto.debug('pack name = Community Common Scripts, pack version = 1.3.8')





  import ipaddress
  import traceback


  ''' COMMAND FUNCTION '''


  def return_address_binary_command(args: Dict[str, Any]) -> CommandResults:

      ip_address = args.get('ip_address', None)

      ip_binary = str(ipaddress.ip_address(ip_address).__format__('b'))

      binary_object = {
          "address": ip_address,
          "binary": ip_binary
      }

      readable_output = tableToMarkdown(t=binary_object, name='Subnet Binary')

      return CommandResults(
          outputs_prefix='IPCalc.IP.Binary',
          outputs_key_field='',
          readable_output=readable_output,
          outputs=binary_object
      )


  ''' MAIN FUNCTION '''


  def main():
      try:
          return_results(return_address_binary_command(demisto.args()))
      except Exception as ex:
          demisto.error(traceback.format_exc())
          return_error(f'Failed to execute IPCalcReturnSubnetBinary. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('IPCalcReturnAddressBinary', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
