args:
- description: Date time in ISO Format
  name: from
  required: true
- description: Date time in ISO format
  name: to
  required: true
commonfields:
  id: 4435e71f-9838-445f-887a-b1bb9a6c5ab6
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.7.33922
enabled: true
engineinfo: {}
mainengineinfo: {}
name: IncidentsReviewdByL2
pswd: ""
runas: DBotWeakRole
runonce: false
script: |+
  from typing import Dict, Any
  import traceback


  ''' STANDALONE FUNCTION '''
  users=[]
  users_data={}


  def get_incident_data(fromDate,toDate):

      query = "reviewdate=>\""+fromDate+"\"""and reviewdate=<\""+toDate+"\" and -reviewedby:"""

      res=demisto.executeCommand("SearchIncidentsV2", {'query':query,'size':1000})[0]['Contents'][0]['Contents']['data']

      for index in range(len(res)):
          if res[index]['CustomFields']['reviewedby'] == '':
              users.append('Others')
          else:
              users.append(res[index]['CustomFields']['reviewedby'])

      get_count_incidents_modified_by_users(users)


  def get_count_incidents_modified_by_users(users):
      for user in users:
          if user not in users_data.keys():
              users_data[user] = 1
          else:
              users_data[user] = users_data[user]+1

      create_widget(users_data)





  def create_widget(users_data):

      data=[]
      for keys,values in users_data.items():
          data.append({"data":[int(values)],"groups": None,"name":keys})

      demisto.results(json.dumps(data));



  ''' MAIN FUNCTION '''


  def main():
      try:
          fromDate = demisto.args()['from']
          toDate = demisto.args()['to']

          get_incident_data(fromDate,toDate)
          # TODO: replace the invoked command function with yours
          #return_results(basescript_dummy_command(demisto.args()))

      except Exception as ex:

          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute BaseScript. Error: {str(ex)}')





  ''' ENTRY POINT '''





  if __name__ in ('__main__', '__builtin__', 'builtins'):

      main()



scripttarget: 0
subtype: python3
tags:
- widget
- dynamic-section
type: python
