args:
- description: JSON String
  name: value
  required: true
- description: JQ compatible query
  name: query
  required: true
comment: "Run JQ Query. \n\nCheck these links:\n- https://stedolan.github.io/jq/manual/#Invokingjq\n-
  https://jqplay.org/"
commonfields:
  id: jq
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.1.0
    itemVersion: 1.3.6
    packID: CommunityCommonScripts
    packName: Community Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must: []
dockerimage: demisto/jq:1.0.0.113893
enabled: true
engineinfo: {}
mainengineinfo: {}
name: jq
outputs:
- contextPath: jq.result
  description: Result of jq-query
  type: unknown
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('jq', 'start', __line__())
  demisto.debug('pack name = Community Common Scripts, pack version = 1.3.6')


  import json
  import traceback

  import pyjq


  ''' MAIN FUNCTION '''


  def jq_wrap(json_str, query):
      j = json.loads(json_str)

      res = pyjq.all(query, j)
      cmd_res = demisto.executeCommand('Set', {'key': 'jq.result', 'value': res})
      if not is_error(cmd_res):
          return_results(res)


  def main():
      try:
          jq_wrap(demisto.args()["value"], demisto.args()["query"])
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute jq. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('jq', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- transformer
type: python
