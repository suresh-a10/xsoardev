comment: Retrieves the time left until the next shift begins.
commonfields:
  id: TimeToNextShift
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 1.3.13
    packID: ShiftManagement
    packName: Shift Management
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.115186
enabled: true
engineinfo: {}
mainengineinfo: {}
name: TimeToNextShift
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('TimeToNextShift', 'start', __line__())
  demisto.debug('pack name = Shift Management, pack version = 1.3.13')



  def get_time_to_next_shift(roles):
      today_week_day = datetime.today().weekday()
      # transform python weekday to demisto shift weekday(monday in python is 0 and in demisto is 1)
      today_week_day = 0 if today_week_day == 6 else today_week_day + 1

      for role in roles:
          shifts = role.get('shifts') or []
          for shift in shifts:
              shift_from_day = shift.get('fromDay')
              shift_to_day = shift.get('toDay')

              if shift_from_day <= today_week_day <= shift_to_day:

                  # get the time when the shift starts
                  delta = shift_from_day - today_week_day
                  shift_from = datetime.today() + timedelta(days=delta)
                  shift_from = shift_from.replace(minute=shift.get('fromMinute'), hour=shift.get('fromHour'), second=0)

                  # get the time when the shift ends
                  delta = shift_to_day - today_week_day
                  shift_to = datetime.today() + timedelta(days=delta)
                  shift_to = shift_to.replace(minute=shift.get('toMinute'), hour=shift.get('toHour'), second=0)

                  if shift_from < datetime.today() < shift_to:
                      # found the current shift
                      diff = shift_to - datetime.today()
                      return round(diff.total_seconds())
      return 0


  def main():
      get_roles_response = demisto.executeCommand('getRoles', {})
      if is_error(get_roles_response):
          demisto.error(f'Failed to get roles: {str(get_error(get_roles_response))}')
      else:
          roles = get_roles_response[0]['Contents']
          widget = [{'name': '', 'data': [get_time_to_next_shift(roles)]}]
          return_results(json.dumps(widget))


  if __name__ in ('__builtin__', 'builtins', '__main__'):
      main()

  register_module_line('TimeToNextShift', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Shift Management
- widget
type: python
