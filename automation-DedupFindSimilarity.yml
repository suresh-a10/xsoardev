commonfields:
  id: 3f7ebbfc-b7cf-4e99-8c97-79ff8164fad4
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: Incident Management Contribution Pack
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: DedupFindSimilarity
pswd: ""
runas: DBotWeakRole
runonce: false
script: |-
  incidents = demisto.get(demisto.context(),'DBotFindSimilarIncidents.[1].similarIncident.[0].id')

  if incidents:
      oldest_incident = min(incidents, key=lambda x: x.get('created'))

      oldest_incident_id = oldest_incident.get('incidentID')

      demisto.setContext('OldestIncidentID', oldest_incident_id)
  else:
      demisto.error("No similar incident found")












  # import requests
  # import json

  # base_url = "https://10.5.21.160/api/v1"

  # api_key = "3FCD385616C8ECBF6FF1C08D21C2C3DA"

  # headers = {
  #     "Content-Type": "application/json",
  #     "Authorization": f"Bearer {api_key}"
  # }


  # def fetch_incident_details(id):
  #     """Fetch details of a specific incident by ID."""

  #     url = f"https://10.5.21.160/api/v1/incident/{id}"
  #     response = requests.get(url,headers=headers,verify=False)
  #     if response.status_code == 200:
  #         return response.json()
  #     else:
  #         print(f"Failed to fetch incident details. Status code: {response.status_code}")
  #         return None

  # def find_similar_incidents():
  #     url = f"{base_url}/incident/query"
  #     params = {
  #         "query": "-status:closed -category:job",
  #         "size": 200
  #     }
  #     response = requests.post(url, headers=headers, params=params, verify=False)
  #     if response.status_code == 200:
  #         return response.json().get('data',[])

  #     else:
  #         print(f"Failed to find similar incidents. Status code: {response.status_code}")
  #         return None

  # def add_child_incident_to_parent(parent_incident_id, child_incident_id):
  #     url = f"{base_url}/incident/{parent_incident_id}/relationship/add"
  #     payload = {
  #         "childId": child_incident_id,
  #         "relationshipType": "child"
  #     }
  #     response = request.post(url, headers=headers, json=payload,verify=False)
  #     if response.status_code == 200:
  #         return True
  #     else:
  #         print(f"Failed to add child incident to parent incident. Status code: {response.status_code}")
  #         return False

  # def update_parent_incident_with_child_info(paraent_incident_id, child_incident_name, child_incident_id):
  #     url = f"{base_url}/incident/{parent_incident_id}"
  #     payload = {
  #         "CustomFields": {
  #             "child_incident_name": child_incident_name,
  #             "child_incident_id": child_incident_id
  #         }
  #     }
  #     response = requests.put(url, headers=headers, json=payload, verify=False)
  #     if response.status.code == 200:
  #         return true
  #     else:
  #         print(f"Failed to update parent incident with child incident info. Status code: {response.status_code}")
  #         return False

  # def determine_earliest_incident(incidents):

  #     if not incidents:
  #         return None

  #     incidents.sort(key=lambda x: x['occured'])
  #     return incidents[0]['id']

  # def main():
  #     incident_id = demisto.args().get('incident_id')
  #     incident_details =fetch_incident_details(incident_id)
  #     if incident_details:
  #         print("Incident Details:")
  #         print(json.dumps(incident_details, indent=2))


  #     similar_incidents = find_similar_incidents()
  #     if similar_incidents:
  #         print("Similar Incidents:")
  #         print(json.dumps(similar_incidents, indent=2))
  #         #determine earliest similar incident as parent incident
  #         parent_incident_id = determine_earliest_incident(similar_incidents)

  #         child_incident_id = incident_id
  #         child_incident_name = incident_details.get('name')

  #         if parent_incident_id and child_incident_id and parent_incident_id != child_incident_id:
  #             if add_child_incident_to_parent(parent_incident_id,child_incident_id):
  #                 print(f"Child incident {child_incident_id} added to parent incident {parent_incident_id}")

  #                 if update_parent_incident_with_child_info(parent_incident_id, child_incident_name, child_incident_id):
  #                     print(f"Parent incident {parent_incident_id} updated with child incident name {child_incident_name} and ID {child_incident_id}")

  #                 else:
  #                     print("Failed to update parent incident with child incident info.")
  #             else:
  #                 print("Failed to add child incident to parent incident.")
  #         else:
  #             print("No suitable parent incident found or child incident is the same as parent incident.")

  # if __name__ in ('__main__', '__builtin__','builtins'):
  #     main()
scripttarget: 0
subtype: python3
tags: []
type: python
