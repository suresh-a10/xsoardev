args:
- description: Provide File EntryID
  name: entry_id
  required: true
- description: provide the
  name: filename
  required: true
- defaultValue: "1"
  description: Only for spreadsheet files. The starting row of the spreadsheet to
    fetch from. The first row is 1.
  name: starting_row
comment: This script extracts indicators from csv, excel and text file
commonfields:
  id: bb025a8e-03e8-490c-8f44-308f36159ec9
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: docker.io/demisto/py3-tools:1.0.0.63856
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ExtractIndicatorsfromFile
pswd: ""
runas: DBotWeakRole
runonce: false
script: |2+

  from typing import Dict, Any
  import traceback
  import csv
  import xlrd



  # Fixed xlrd known issue
  xlrd.xlsx.ensure_elementtree_imported(False, None)
  xlrd.xlsx.Element_has_iter = True

  ''' to Markdown '''
  def string_to_markdown(indicators):

      indicators_dict = json.loads(indicators)

      md = ''

      for key, values in indicators_dict.items():
          md += f"### {key}\n"
          for value in values:
              md += f"- {value}\n"

      demisto.results({
          'Type': entryTypes['note'],
          'ContentsFormat': formats['text'],
          'Contents': indicators_dict,
          'HumanReadable': md,
          'EntryContext': {'ExtractedIndicators':indicators_dict}
      })

  ''' Indicator Extraction '''
  def extract_indicator_data(data):
      indicators_data = demisto.executeCommand("extractIndicators", {'text': data})[0]['Contents']

      md = string_to_markdown(indicators_data)



  def parse_text_file(file_path):
      data=''
      with open(file_path, "r") as fp:
          file_data = fp.read()
          data+=file_data

      extract_indicator_data(data)

  ''' Excel file parser '''

  def parse_excel_file(file_path,starting_row):
      workbook = xlrd.open_workbook(file_path, on_demand=True)
      sheet_names = workbook.sheet_names()
      indicators_data=[]
      context = {}

      for sheetnum in range(workbook.nsheets):
          worksheet = workbook.sheet_by_index(sheetnum)
          first_row = []
          for col in range(worksheet.ncols):
              first_row.append(str(worksheet.cell_value(0,col)))
          data = []
          for row in range(starting_row, worksheet.nrows):
              elm = {}
              for col in range(worksheet.ncols):
                  elm[first_row[col]] = worksheet.cell_value(row, col)
              data.append(elm)
          indicators_data.append(data)

      extract_indicator_data(indicators_data)


  ''' CSV File parser '''
  def parse_csv_file(file_path):

      indicator_data=[]

      with open(file_path) as csv_file:
          csv_reader_data = csv.reader(csv_file, delimiter=',')
          for line in csv_reader_data:
              indicator_data.append(line[0])

      extract_indicator_data(indicator_data)

  ''' MAIN FUNCTION '''
  def main():

      file_entry_id = demisto.args()['entry_id']
      file_name = demisto.args()['filename']
      starting_row = int(demisto.args()['starting_row'])

      res = demisto.getFilePath(file_entry_id)
      file_path = res['path']

      if file_name.endswith(".csv"):
          parse_csv_file(file_path)

      elif file_name.endswith(".xlsx"):
          parse_excel_file(file_path,starting_row)

      elif file_name.endswith(".txt"):
          parse_text_file(file_path)
      else:
          return_results("Upload csv, excel or txt file")




  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

scripttarget: 0
subtype: python3
tags: []
type: python
