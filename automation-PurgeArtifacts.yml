commonfields:
  id: 1abfb47e-f4a6-4b35-8c4d-05d14db9fd2e
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.8.37233
enabled: true
engineinfo: {}
mainengineinfo: {}
name: PurgeArtifacts
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  ## WARNING: This script deletes any war room entry with file artifact that has not been marked as evidence on any incident within the query time range


  def GetEntries(incid):
      return demisto.executeCommand("demisto-api-post", {
          'uri': f"/investigation/{incid}",
          'body': {}
      })[0]['Contents']['response']['lastEntries']


  def DeleteEntry(e):
      return demisto.executeCommand("demisto-api-post", {
          'uri': "/entry/delete/v2",
          'body': {
              'id': e['id'],
              'deleteArtifact': True
          }
      })


  def DeleteFileArtifactsNotEvidence(incid):
      entries = GetEntries(incid)
      for e in entries:
          #Is it marked as EVIDENCE
          if not e['pinned']:
              #Is there a file associated artifact
              if e['fileID']:
                  DeleteEntry(e)


  def SearchIncidents(args):
      if fromdate := arg_to_datetime(args.get('fromdate')):
          from_date = fromdate.isoformat()
          args['fromdate'] = from_date
      if todate := arg_to_datetime(args.get('todate')):
          to_date = todate.isoformat()
          args['todate'] = to_date
      return execute_command('getIncidents', args, extract_contents=False)[0]['Contents']['data']


  ## WARNING: This script deletes any war room entry with file artifact that has not been marked as evidence on any incident within the query time range
  def main():
      try:
          args = {
              'status': "closed",
              'notstatus': "job",
              'fromdate': "90 days ago",
              'todate': "60 days ago"
          }

          incidents = SearchIncidents(args)
          for i in incidents:
              DeleteFileArtifactsNotEvidence(i['id'])
      except Exception as ex:
          demisto.error(traceback.format_exc())
          return_error(f"PurgeArtifacts: Exception failed to execute. Error: {str(ex)}")


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()
scripttarget: 0
subtype: python3
tags: []
type: python
