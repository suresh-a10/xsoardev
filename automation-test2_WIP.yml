commonfields:
  id: ca30f609-5dd3-4bd5-8769-665c9bc1b19d
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: test2_WIP
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  """args=demisto.args()
  description=args.get("desc").lower()
  if (context.get("type")=="QRadar offenses onboarding") and ("unknown" in description):
      print("assign to sen l1")
  else:
      print("assign to l1")"""

  """

  isDomain=0
  isURL=0
  isHash=0
  isIP=0"""


  indicators=demisto.get(demisto.context(), 'ExtractedIndicators')


  def is_context(key):
      return bool(demisto.get(demisto.context(),key))


  isDomain=is_context('ExtractedIndicators.Domain')
  isURL=is_context('ExtractedIndicators.URL')
  isHash=is_context('ExtractedIndicators.File')
  isIP=is_context('ExtractedIndicators.IP')


  #IOC=demisto.get(demisto.context(), 'ExtractedIndicators.File')

  if isDomain:
      domain=demisto.get(demisto.context(), 'ExtractedIndicators.Domain')
      demisto.results(demisto.executeCommand('Set', { 'key' : "FinalIOCs" ,  'value' : domain , 'append' : True}))


  if isHash:
      hash1=demisto.get(demisto.context(), 'ExtractedIndicators.File')
      demisto.results(demisto.executeCommand('Set', { 'key' : "FinalIOCs" ,  'value' : hash1 , 'append' : True}))


  if isURL:
      url=demisto.get(demisto.context(), 'ExtractedIndicators.URL')
      demisto.results(demisto.executeCommand('Set', { 'key' : "FinalIOCs" ,  'value' : url , 'append' : True}))


  if isIP:
      ip=demisto.get(demisto.context(), 'ExtractedIndicators.IP')
      demisto.results(demisto.executeCommand('Set', { 'key' : "FinalIOCs" ,  'value' : ip , 'append' : True}))









  #for k,v in indicators[0].items():
  #    print(v)
  #print(indicators[0])
scripttarget: 0
subtype: python3
tags: []
type: python
