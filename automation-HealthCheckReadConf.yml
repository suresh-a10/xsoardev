args:
- default: true
  description: War room entryID of the file to read.
  name: entryID
  required: true
comment: Read the license_data.log file extracted from the log bundle
commonfields:
  id: HealthCheckReadConf
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 3.0.2
    packID: HealthCheck
    packName: System Diagnostics and Health Check
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.14.100715
enabled: true
engineinfo: {}
mainengineinfo: {}
name: HealthCheckReadConf
outputs:
- contextPath: FileData
  description: Data read from war room file
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('HealthCheckReadConf', 'start', __line__())
  demisto.debug('pack name = System Diagnostics and Health Check, pack version = 3.0.2')




  multitenant = 'False'
  multiRepo = 'False'

  res = demisto.executeCommand('getFilePath', {'id': demisto.args()['entryID']})
  if res[0]['Type'] == entryTypes['error']:
      demisto.results('File not found')

  try:
      with open(res[0]['Contents']['path'], 'r') as file:
          data = file.readlines()

          for line in data:
              if '"ProxyMode": true' in line:
                  multitenant = 'True'
              if '"remote": {' in line:
                  multiRepo = 'True'
          demisto.executeCommand("setIncident", {
              "xsoarmultitenant": multitenant,
              "xsoarmultirepo": multiRepo,
          })


  except ValueError:  # includes simplejson.decoder.JSONDecodeError
      demisto.results('Decoding JSON has failed')

  register_module_line('HealthCheckReadConf', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
