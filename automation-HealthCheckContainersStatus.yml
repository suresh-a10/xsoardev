comment: Containers status.
commonfields:
  id: HealthCheckContainersStatus
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 3.0.2
    packID: HealthCheck
    packName: System Diagnostics and Health Check
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.111526
enabled: true
engineinfo: {}
mainengineinfo: {}
name: HealthCheckContainersStatus
outputs:
- contextPath: containers
  description: Containers status table.
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('HealthCheckContainersStatus', 'start', __line__())
  demisto.debug('pack name = System Diagnostics and Health Check, pack version = 3.0.2')



  XSOARV8_HTML_STYLE = "color:#FFBE98;text-align:center;font-size:150%;>"


  def main():
      if is_demisto_version_ge("8.0.0"):
          msg = "Not Available for XSOAR v8"
          html = f"<h3 style={XSOARV8_HTML_STYLE}{str(msg)}</h3>"
          demisto.results({"ContentsFormat": formats["html"], "Type": entryTypes["note"], "Contents": html})
          sys.exit()
      incident = demisto.incidents()[0]
      account_name = incident.get("account")
      account_name = f"acc_{account_name}/" if account_name != "" else ""

      res = execute_command("core-api-get", {"uri": f"{account_name}health/containers"})
      containers = res["response"]

      return CommandResults(
          readable_output=tableToMarkdown("Containers Status", [containers], headers=["all", "inactive", "running"]),
          outputs_prefix="containers",
          outputs=[containers],
          raw_response=containers,
      )


  if __name__ in ("__main__", "__builtin__", "builtins"):  # pragma: no cover
      return_results(main())

  register_module_line('HealthCheckContainersStatus', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
