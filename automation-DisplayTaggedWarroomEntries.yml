args:
- defaultValue: '{"tags": ["report"]}'
  description: 'The JSON filter for warroom entries described here: https://xsoar.pan.dev/docs/integrations/get-entries-filter'
  name: filter
comment: Display warroom entries in a dynamic section which are tagged with 'report'
commonfields:
  id: DisplayTaggedWarroomEntries
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.3.6
    packID: CommunityCommonScripts
    packName: Community Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.14.100715
enabled: true
engineinfo: {}
mainengineinfo: {}
name: DisplayTaggedWarroomEntries
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('DisplayTaggedWarroomEntries', 'start', __line__())
  demisto.debug('pack name = Community Common Scripts, pack version = 1.3.6')


  import json

  filter_arg = json.loads(demisto.args().get("filter", json.dumps({"tags": ["report"]})))

  raw_entries = None

  if filter_arg:
      raw_entries = demisto.executeCommand('getEntries', {"id": demisto.incident().get("id"), "filter": filter_arg})

  if raw_entries:
      entries = []

      for entry in raw_entries:
          entries.append(str(entry["Contents"]))

  else:
      entries = ["No entries tagged with 'report' tag"]

  # demisto.results(str(entries))

  result = {
      'Type': entryTypes["note"],
      'Contents': "\n".join(entries),
      'ContentsFormat': formats['markdown'],
      'HumanReadable': "\n".join(entries),
      'ReadableContentsFormat': formats['markdown']
  }

  demisto.results(result)

  register_module_line('DisplayTaggedWarroomEntries', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
