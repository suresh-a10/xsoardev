comment: Send email to all recipients from the selected campaign incidents.
commonfields:
  id: SendEmailToCampaignRecipients
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 3.4.7
    packID: Campaign
    packName: Phishing Campaign
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.83255
enabled: true
engineinfo: {}
mainengineinfo: {}
name: SendEmailToCampaignRecipients
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('SendEmailToCampaignRecipients', 'start', __line__())
  ### pack version: 3.4.7



  INVALID_EMAIL_TO_MSG = 'The email to field should contain valid value'


  def main():
      try:
          incident = demisto.incidents()[0]
          custom_fields = incident.get('CustomFields', {})
          emailto = custom_fields.get('campaignemailto')
          subject = custom_fields.get('campaignemailsubject')
          email_body = custom_fields.get('campaignemailbody')
          instance_to_use = custom_fields.get('campaignemailsenderinstance')
          if not emailto:
              return_error(INVALID_EMAIL_TO_MSG)

          res = demisto.executeCommand("send-mail", {"to": emailto, "subject": subject, "body": email_body,
                                                     "using": instance_to_use})
          return_results(res)
      except Exception as ex:
          return_error(f'Failed to execute SendEmailToCampaignRecipients. Error: {str(ex)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('SendEmailToCampaignRecipients', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
