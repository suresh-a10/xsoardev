comment: Trend graph for incident creation.
commonfields:
  id: HealthCheckIncidentsCreatedWeekly
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 3.0.2
    packID: HealthCheck
    packName: System Diagnostics and Health Check
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.111526
enabled: true
engineinfo: {}
mainengineinfo: {}
name: HealthCheckIncidentsCreatedWeekly
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('HealthCheckIncidentsCreatedWeekly', 'start', __line__())
  demisto.debug('pack name = System Diagnostics and Health Check, pack version = 3.0.2')




  def queryWidget(uri):
      stats = demisto.executeCommand(
          "core-api-post",
          {
              "uri": uri,
              "body": {
                  "size": 31,
                  "dataType": "incidents",
                  "query": "",
                  "dateRange": {"period": {"byFrom": "months", "fromValue": 6}},
                  "widgetType": "line",
                  "params": {"groupBy": ["occurred(w)"], "timeFrame": "weeks"},
              },
          },
      )
      if is_demisto_version_ge("8.0.0"):
          res = stats[0]["Contents"]["response"]["groups"]
      else:
          res = stats[0]["Contents"]["response"]

      data = {"Type": 17, "ContentsFormat": "line", "Contents": {"stats": res, "params": {"timeFrame": "weeks"}}}
      return data


  ctx = demisto.context()
  dataFromCtx = ctx.get("widgets")

  if not dataFromCtx:
      # version 8
      if is_demisto_version_ge("8.0.0"):
          uri = "/xsoar/v2/statistics/widgets/query"
          res = queryWidget(uri)
          return_results(res)

      else:
          incident = demisto.incidents()[0]
          accountName = incident.get("account")
          accountName = f"acc_{accountName}/" if accountName != "" else ""
          uri = f"{accountName}statistics/widgets/query"
          res = queryWidget(uri)
          return_results(res)

  else:
      data = {
          "Type": 17,
          "ContentsFormat": "line",
          "Contents": {"stats": dataFromCtx["IncidentsCreatedWeekly"], "params": {"timeFrame": "weeks"}},
      }
      demisto.results(data)

  register_module_line('HealthCheckIncidentsCreatedWeekly', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
