args:
- description: Provide the indicator query
  name: Query
  required: true
- description: size of the indicators to return
  name: Size
  required: true
commonfields:
  id: 30fd013a-9739-4de8-8a3f-d7b72cdea55b
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.11.59581
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetIndicatorsDataBatch
pswd: ""
runas: DBotWeakRole
runonce: false
script: |2+


  from typing import Dict, Any
  import traceback
  import json
  from datetime import datetime,timedelta

  indicators=[]
  #indicator_batches=[]

  """
  def indicators_data_to_batches(indicators,batch_size):


      batch_indicators = [indicators[i:i + batch_size]for i in range(0, len(indicators), batch_size)]

      for key,value in enumerate(batch_indicators):
          indicator_batches.append({key:value})

      return indicator_batches
  """

  ''' MAIN FUNCTION '''

  def main():
      query = demisto.args()['Query']
      size = int(demisto.args()['Size'])
      #batch_size = int(demisto.args()['BatchSize'])
      #res=demisto.executeCommand("findIndicators", {"query":query,"size":size})[0]['Contents']
      #print(res)
      res=demisto.executeCommand("SearchIndicator", {"query":query,"size":size})[0]['Contents']
      count=int(len(res)/6)

      for i in range(count):
          results=demisto.executeCommand("findIndicators", {"query":query,"size":i,"page":i})
          print(results)

      """
      for item in res:
          for key,value in item.items():
              if key == 'timestamp':
                  e
                  indicators.append()
      """

      #indicator_batch=indicators_data_to_batches(indicators,batch_size)

      #demisto.results(demisto.executeCommand("addToList", {"listName":"DemoList","listData":json.dumps(indicator_batch)}))
      #demisto.setContext("Indicators Batch", indicator_batch)

  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

scripttarget: 0
subtype: python3
tags: []
type: python
