args:
- default: true
  description: The value of the email's "From" attribute.
  name: from
- description: The value of the email's "Subject" attribute.
  name: subject
- description: The value of the email's "attachmentName" attribute.
  name: attachmentName
- description: The value of the email's "Body" attribute.
  name: body
- auto: PREDEFINED
  defaultValue: "true"
  description: Limit the search to the current week (true/false).
  name: searchThisWeek
  predefined:
  - "true"
  - "false"
- auto: PREDEFINED
  defaultValue: "true"
  description: Removes the prefix from the subject of reply and forward messages (e.g.,
    FW:).
  name: stripSubject
  predefined:
  - "true"
  - "false"
- auto: PREDEFINED
  defaultValue: "false"
  description: Escape from colon (true/false).
  name: escapeColons
  predefined:
  - "true"
  - "false"
comment: Returns an EWS query according to the automation's arguments.
commonfields:
  id: BuildEWSQuery
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 2.1.10
    packID: MicrosoftExchangeOnPremise
    packName: Microsoft Exchange On-Premise
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.83255
engineinfo: {}
mainengineinfo: {}
name: BuildEWSQuery
outputs:
- contextPath: EWS.Query
  description: The result query.
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('BuildEWSQuery', 'start', __line__())
  ### pack version: 2.1.10


  import re


  def build_ews_query(demisto_args):
      # Regex for removing forward/replay prefixes
      p = re.compile('([\[\(] *)?(RE|FWD?) *([-:;)\]][ :;\])-]*|$)|\]+ *$', re.IGNORECASE)

      args = {}

      if demisto_args.get("from"):
          args["From"] = demisto_args.get("from")
      if demisto_args.get("subject"):
          args["Subject"] = demisto_args.get("subject")
      if demisto_args.get("attachmentName"):
          args["Attachment"] = demisto_args.get("attachmentName")
      if demisto_args.get("body"):
          args["Body"] = demisto_args.get("body")

      stripSubject = True if demisto_args.get("stripSubject").lower() == "true" else False
      escapeColons = True if demisto_args.get("escapeColons").lower() == "true" else False
      if stripSubject and args.get("Subject"):
          # Recursively remove the regex matches only from the beginning of the string
          match_string = args["Subject"]
          location_match = p.match(match_string)
          location = location_match.start() if location_match else -1

          while location == 0 and match_string:
              match_string = p.sub("", match_string, 1)
              location_match = p.match(match_string)
              location = location_match.start() if location_match else -1

          args["Subject"] = match_string

      if escapeColons:
          query = " AND ".join(r'{0}\\:"{1}"'.format(key, value) for (key, value) in args.items())

      else:
          query = " AND ".join('{0}:"{1}"'.format(key, value) for (key, value) in args.items())

      search_last_week = True if demisto_args.get("searchThisWeek").lower() == "true" else False
      if search_last_week:
          query = query + ' AND Received:"this week"'

      return CommandResults(
          content_format=formats["json"],
          raw_response={"EWS": {"Query": query or ' '}},
          entry_type=entryTypes["note"],
          readable_output=query or ' ',
          outputs={"EWS": {"Query": query or ' '}}
      )


  def main():  # pragma: no cover
      args = demisto.args()
      try:
          return_results(build_ews_query(args))
      except Exception as e:
          err_msg = f'Encountered an error while running the script: [{e}]'
          return_error(err_msg, error=e)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('BuildEWSQuery', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- ews
type: python
