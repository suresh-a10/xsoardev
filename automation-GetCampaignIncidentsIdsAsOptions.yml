comment: Get the campaign incident IDs as option values for Multi Select field.
commonfields:
  id: GetCampaignIncidentsIdsAsOptions
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 3.4.12
    packID: Campaign
    packName: Phishing Campaign
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.115186
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetCampaignIncidentsIdsAsOptions
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GetCampaignIncidentsIdsAsOptions', 'start', __line__())
  demisto.debug('pack name = Phishing Campaign, pack version = 3.4.12')



  ALL_OPTION = 'All'
  NO_CAMPAIGN_INCIDENTS_MSG = 'There is no Campaign Incidents in the Context'
  NO_ID_IN_CONTEXT = 'There is no \"id\" key in the incidents'


  def get_campaign_incidents():
      """
          Get the campaign incidents form the incident's context

          :rtype: ``list``
          :return: list of campaign incidents
      """

      incident_id = demisto.incidents()[0]['id']
      res = demisto.executeCommand('getContext', {'id': incident_id})
      if isError(res):
          return_error(f'Error occurred while trying to get the incident context: {get_error(res)}')

      return demisto.get(res[0], 'Contents.context.EmailCampaign.incidents')


  def get_incident_ids_as_options(incidents):
      """
          Collect the campaign incidents ids form the context and return them as options for MultiSelect field

          :type incidents: ``list``
          :param incidents: the campaign incidents to collect ids from

          :rtype: ``dict``
          :return: dict with the ids as options for MultiSelect field e.g {"hidden": False, "options": ids}
      """
      try:
          ids = [str(incident['id']) for incident in incidents]
          ids.sort(key=lambda incident_id: int(incident_id))
          ids.insert(0, ALL_OPTION)
          return {"hidden": False, "options": ids}
      except KeyError as e:
          raise DemistoException(NO_ID_IN_CONTEXT) from e


  def main():

      try:
          incidents = get_campaign_incidents()
          if incidents:
              result = get_incident_ids_as_options(incidents)
          else:
              result = NO_CAMPAIGN_INCIDENTS_MSG

          return_results(result)

      except Exception as err:
          return_error(str(err), error=traceback.format_exc())


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('GetCampaignIncidentsIdsAsOptions', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- field-display
type: python
