comment: This script retrieves additional original alert information from the context.
commonfields:
  id: CortexXDRAdditionalAlertInformationWidget
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 6.1.98
    packID: CortexXDR
    packName: Cortex XDR by Palo Alto Networks
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.115186
engineinfo: {}
mainengineinfo: {}
name: CortexXDRAdditionalAlertInformationWidget
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('CortexXDRAdditionalAlertInformationWidget', 'start', __line__())
  demisto.debug('pack name = Cortex XDR by Palo Alto Networks, pack version = 6.1.98')


  ''' COMMAND FUNCTION '''


  def get_additonal_info() -> List[Dict]:
      alerts = demisto.get(demisto.context(), 'PaloAltoNetworksXDR.OriginalAlert')
      if not alerts:
          raise DemistoException('Original Alert is not configured in context')
      if not isinstance(alerts, list):
          alerts = [alerts]

      results = []
      for alert in alerts:
          alert_event = alert.get('event')
          res = {'Alert Full Description': alert.get('alert_full_description'),
                 'Detection Module': alert.get('detection_modules'),
                 'Vendor': alert_event.get('vendor'),
                 'Provider': alert_event.get('cloud_provider'),
                 'Log Name': alert_event.get('log_name'),
                 'Event Type': demisto.get(alert_event, 'raw_log.eventType'),
                 'Caller IP': alert_event.get('caller_ip'),
                 'Caller IP Geo Location': alert_event.get('caller_ip_geolocation'),
                 'Resource Type': alert_event.get('resource_type'),
                 'Identity Name': alert_event.get('identity_name'),
                 'Operation Name': alert_event.get('operation_name'),
                 'Operation Status': alert_event.get('operation_status'),
                 'User Agent': alert_event.get('user_agent')}
          results.append(res)
      indicators = [res.get('Caller IP') for res in results]
      indicators_callable = indicators_value_to_clickable(indicators)
      for res in results:
          res['Caller IP'] = indicators_callable.get(res.get('Caller IP'))
      return results


  ''' MAIN FUNCTION '''


  def main():
      try:
          results = get_additonal_info()
          command_results = CommandResults(
              readable_output=tableToMarkdown('Original Alert Additional Information', results,
                                              headers=list(results[0].keys()) if results else None))
          return_results(command_results)
      except Exception as ex:
          return_error(f'Failed to execute AdditionalAlertInformationWidget. Error: {str(ex)}')


  ''' ENTRY POINT '''

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('CortexXDRAdditionalAlertInformationWidget', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
