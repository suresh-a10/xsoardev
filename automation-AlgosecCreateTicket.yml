args:
- description: A free text description of the issue.
  name: description
- description: A list of device names, on which the change should be made.
  name: devices
- auto: PREDEFINED
  description: 'The device action to perform for the traffic. This can be either of
    the following: 1 - Allow the traffic, 0 - Block the traffic.'
  name: action
  predefined:
  - "0"
  - "1"
  required: true
- description: The destination address to perform the action on.
  name: destAddress
  required: true
- description: The source address to perform the action on.
  name: sourceAddress
  required: true
- description: The email address of the requestor.
  name: requestor
  required: true
- description: The change request's title.
  name: subject
  required: true
- description: The device service or port for the connection, for example, "http"
    or "tcp/123".
  name: service
  required: true
- description: The user for the connection.
  name: user
  required: true
- description: The application for the connection.
  name: application
  required: true
comment: Creates a new FireFlow change request.
commonfields:
  id: AlgosecCreateTicket
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.0.13
    packID: Algosec
    packName: AlgoSec
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - algosec-create-ticket
dockerimage: demisto/python3:3.10.13.83255
engineinfo: {}
mainengineinfo: {}
name: AlgosecCreateTicket
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('AlgosecCreateTicket', 'start', __line__())
  ### pack version: 1.0.13




  def algosec_create_ticket():
      resp = demisto.executeCommand("algosec-create-ticket", demisto.args())

      if isError(resp[0]):
          result = resp
      else:
          data = demisto.get(resp[0], "Contents.createTicketResponse")
          if data:
              data = data if isinstance(data, list) else [data]
              for item in data:
                  for row in item:
                      if '#text' in item[row]:
                          item[row] = item[row]['#text']

              data = flattenTable(data)
              result = {"ContentsFormat": formats["table"], "Type": entryTypes["note"], "Contents": data}
          else:
              result = "No results."
      return_results(result)


  def main():  # pragma: no cover
      try:
          algosec_create_ticket()
      except Exception as e:
          err_msg = f'Encountered an error while running the script: [{e}]'
          return_error(err_msg, error=e)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('AlgosecCreateTicket', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Algosec
type: python
