args:
- description: Name of Playbook
  name: playbook_name
  required: true
comment: Deprecated. Use RetrievePlaybookDependencies instead. Retrieves all Playbook
  (and Sub-Playbook) Names and Integrations for a provided Playbook name
commonfields:
  id: RetrievePlaybooksAndIntegrations
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.3.8
    packID: CommunityCommonScripts
    packName: Community Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
deprecated: true
dockerimage: demisto/python3:3.10.12.63474
enabled: true
engineinfo: {}
mainengineinfo: {}
name: RetrievePlaybooksAndIntegrations
outputs:
- contextPath: RetrievePlaybooksAndIntegrations.Playbooks
  description: Names of all Playbooks and Sub-Playbooks used
- contextPath: RetrievePlaybooksAndIntegrations.Integrations
  description: Names of all Integrations used
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('RetrievePlaybooksAndIntegrations', 'start', __line__())
  demisto.debug('pack name = Community Common Scripts, pack version = 1.3.8')


  import traceback
  from typing import Any, Dict


  ''' STANDALONE FUNCTION '''


  def perform_rest_call(method: str, endpoint: str, body=None):
      """
      Perform a REST Call
      :param endpoint:
      :param body: `dict` representing the HTTP body
      :param method: `get` or `post`
      :return: The contents from the API Call
      """
      args = {
          'uri': endpoint,
      }
      if body:
          args['body'] = json.dumps(body)

      result = demisto.executeCommand(f"core-api-{method}", args)

      if len(result) < 1 or 'Contents' not in result[0] or 'response' not in result[0].get('Contents'):
          raise Exception(f"Error with REST call to endpoint {endpoint}")

      return result[0]['Contents']['response']


  def get_tasks_list(tasks):
      # {'1':{'id': '1'}, ...} -> [{'id':'1'}, ...]
      tasks_list = []
      for task_number in tasks.keys():
          tasks_list.append(tasks[task_number])
      return tasks_list


  def append_to_playbooks_and_integrations(playbooks, integrations, playbook_name, brands):
      if playbook_name not in playbooks:
          playbooks.append(playbook_name)
      for b in brands:
          if b and b != 'Builtin' and b not in integrations:
              integrations.append(b)
      return playbooks, integrations


  def get_subplaybook_tasks(playbooks, integrations, task):
      # recursively go through all subplaybook tasks and append to playbooks and integrations
      subplaybook_json = perform_rest_call('get', f"playbook/{task['task']['playbookId']}")
      playbooks, integrations = append_to_playbooks_and_integrations(
          playbooks, integrations, subplaybook_json['name'], subplaybook_json['brands'])
      tasks = get_tasks_list(subplaybook_json['tasks'])
      for t in tasks:
          if t['type'] == 'playbook' and t['task'].get('playbookId'):
              # playbookId does not exist if the playbook the task references is missing
              playbooks, integrations = get_subplaybook_tasks(playbooks, integrations, t)
      return playbooks, integrations


  ''' COMMAND FUNCTION '''


  def retrieve_playbooks_and_integrations(args: Dict[str, Any]) -> CommandResults:
      playbooks: List[str] = []
      integrations: List[str] = []
      query = f'''name:"{args['playbook_name']}"'''
      body = {
          'query': query
      }
      playbooks_json = perform_rest_call('post', 'playbook/search', body)
      for playbook_json in playbooks_json['playbooks']:
          if playbook_json['name'] == args['playbook_name']:
              break
      playbooks, integrations = append_to_playbooks_and_integrations(
          playbooks, integrations, playbook_json['name'], playbook_json['brands'])

      tasks = get_tasks_list(playbook_json['tasks'])
      for task in tasks:
          if task['type'] == 'playbook':
              playbooks, integrations = get_subplaybook_tasks(playbooks, integrations, task)

      outputs = {
          'Playbooks': playbooks,
          'Integrations': integrations
      }

      return CommandResults(
          readable_output=f'''Retrieved Playbooks and Integrations for Playbook "{playbook_json['name']}"''',
          outputs_prefix='RetrievePlaybooksAndIntegrations',
          outputs_key_field='',
          outputs=outputs,
      )


  ''' MAIN FUNCTION '''


  def main():
      try:
          return_results(retrieve_playbooks_and_integrations(demisto.args()))
      except Exception as ex:
          demisto.error(traceback.format_exc())
          return_error(f'Failed to execute. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('RetrievePlaybooksAndIntegrations', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
