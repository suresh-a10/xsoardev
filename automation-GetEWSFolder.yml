args:
- defaultValue: Inbox,Inbox\\FOLDER1,Inbox\\FOLDER2
  description: A comma-separated list of the EWS folders paths.
  name: foldersPaths
  required: true
- description: The target mailbox.
  name: targetMailbox
- auto: PREDEFINED
  defaultValue: "false"
  description: Is the folder public?
  name: isPublic
  predefined:
  - "true"
  - "false"
- defaultValue: "1000"
  description: Maximum number of items per folder.
  name: limit
- description: Use this hash seed.
  name: hashSeed
comment: Get emails from multiple folders of an account all at once.
commonfields:
  id: GetEWSFolder
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.5.1
    packID: MicrosoftExchangeOnline
    packName: Microsoft Exchange Online
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.14.92207
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetEWSFolder
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('GetEWSFolder', 'start', __line__())
  ### pack version: 1.5.1




  def convert_mail_to_json(item, folder):
      return {
          'subject': item.get('subject', ''),
          'textBody': item.get('textBody', ''),
          'body': item.get('body', ''),
          'folder': folder
      }


  def main():
      folders_paths_str = demisto.args()['foldersPaths']
      folders_paths_list = [folder.strip() for folder in folders_paths_str.split(',')]
      path_to_mails = {folder: [] for folder in folders_paths_list}   # type: Dict[str, List[str]]
      for folder in folders_paths_list:

          res = demisto.executeCommand('ews-get-items-from-folder', {
              'folder-path': folder,
              'limit': demisto.args().get('limit'),
              'target-mailbox': demisto.args().get('targetMailbox'),
              'is-public': 'False' if demisto.args().get('isPublic') == 'false' else 'True'
          })
          if is_error(res):
              return_error(get_error(res))

          items = res[0]['Contents']
          if isinstance(items, str) and items == 'There is no output results':
              mails_at_folder = []
          else:
              mails_at_folder = [convert_mail_to_json(i, folder) for i in items]
          path_to_mails[folder] = mails_at_folder
      mails_from_all_folders_list = [mail_json for folder_mails in path_to_mails.values() for mail_json in folder_mails]
      return fileResult("all_mails.json", json.dumps(mails_from_all_folders_list))


  if __name__ == "__builtin__" or __name__ == "builtins":
      entry = main()
      demisto.results(entry)

  register_module_line('GetEWSFolder', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- ml
timeout: 6Âµs
type: python
