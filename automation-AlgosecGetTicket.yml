args:
- default: true
  description: ID of requested change request
  name: ticketId
  required: true
comment: Retrieves a FireFlow change request by its ID
commonfields:
  id: AlgosecGetTicket
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.0.13
    packID: Algosec
    packName: AlgoSec
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dependson:
  must:
  - algosec-get-ticket
dockerimage: demisto/python3:3.10.13.86272
engineinfo: {}
mainengineinfo: {}
name: AlgosecGetTicket
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('AlgosecGetTicket', 'start', __line__())
  ### pack version: 1.0.13




  def main():
      try:
          resp = demisto.executeCommand("algosec-get-ticket", demisto.args())

          if isError(resp[0]):
              return CommandResults(raw_response=resp)
          else:
              data = demisto.get(resp[0], "Contents.getTicketResponse")
              if data:
                  raiseTable(data, 'ticket')
                  for key in data:
                      if isinstance(data[key], dict):
                          if '-xmlns' in data[key]:
                              del data[key]['-xmlns']
                          data[key] = zoomField(data[key], '#text')
                  data = flattenRow(data)
                  return CommandResults(content_format=formats["table"],
                                        entry_type=entryTypes["note"],
                                        raw_response=data)
              else:
                  return "No results."
      except Exception as e:
          err_msg = f'Encountered an error while running the script: [{e}]'
          return_error(err_msg, error=e)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('AlgosecGetTicket', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Algosec
type: python
