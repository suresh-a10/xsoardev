args:
- description: War room entryID of the file to read.
  name: entryID
  required: true
comment: "Extract files from log bundle - supports tar.gz & tar \n\nhandle unsupported
  use cases and unextracted files. "
commonfields:
  id: HealthCheckUnpack
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 3.0.2
    packID: HealthCheck
    packName: System Diagnostics and Health Check
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.14.100715
enabled: true
engineinfo: {}
mainengineinfo: {}
name: HealthCheckUnpack
outputs:
- contextPath: "no"
  description: file type is not supported.
- contextPath: "yes"
  description: file type is supported.
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('HealthCheckUnpack', 'start', __line__())
  demisto.debug('pack name = System Diagnostics and Health Check, pack version = 3.0.2')



  import tarfile
  import re


  def extract_files(path, action):
      extracted_files = []
      try:
          with tarfile.open(path, action) as tar:
              for tar_file in tar.getnames():
                  extracted_file = tar.extractfile(tar_file)
                  if not extracted_file:
                      continue

                  data = extracted_file.read()
                  tar_file = tar_file.rsplit('/', 1)[1]

                  return_results(fileResult(tar_file, data))
                  extracted_files.append(tar_file)

          return_results(CommandResults(
              readable_output=tableToMarkdown('', extracted_files, headers='Extracted Files'),
              outputs_prefix='ExtractedFiles',
              outputs=extracted_files,
          ))
          return 'yes'

      except UnicodeDecodeError:
          return "Could not read file"
      except IndexError:
          return "Could not extract files"


  def main(args):
      entry_id = args['entryID']

      try:
          res = demisto.getFilePath(entry_id)
          file_path = res['path']
          file_name = res['name']
          file_suffix = re.findall(r"re:|tar|gz", file_name)

          if "gz" in file_suffix and "tar" in file_suffix:
              tar_action = "r:gz"
          elif "tar" in file_suffix:
              tar_action = "r:"
          else:
              return 'no'

          return extract_files(file_path, tar_action)

      except Exception:
          return 'File not found'


  if __name__ in ('__main__', '__builtin__', 'builtins'):  # pragma: no cover
      return_results(main(demisto.args()))

  register_module_line('HealthCheckUnpack', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Condition
type: python
