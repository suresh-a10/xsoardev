args:
- description: Subnet to use
  name: subnet
  required: true
comment: An automation script to return subnet addresses
commonfields:
  id: IPCalcReturnSubnetAddresses
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.3.8
    packID: CommunityCommonScripts
    packName: Community Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.115186
engineinfo: {}
mainengineinfo: {}
name: IPCalcReturnSubnetAddresses
outputs:
- contextPath: IPCalc.IP.Address
  description: Subnet addresses
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('IPCalcReturnSubnetAddresses', 'start', __line__())
  demisto.debug('pack name = Community Common Scripts, pack version = 1.3.8')





  import ipaddress
  import traceback


  ''' COMMAND FUNCTION '''


  def return_subnet_addresses_command(args: Dict[str, Any]) -> CommandResults:

      subnet = args.get('subnet', None)
      address_objects = ipaddress.IPv4Network(subnet, strict=False).hosts()

      addresses = []

      for address_object in address_objects:
          addresses.append(format(address_object))

      readable_output = tableToMarkdown(headers='IP Addresses:', t=addresses, name='List Addresses')

      return CommandResults(
          outputs_prefix='IPCalc.IP.Address',
          outputs_key_field='',
          readable_output=readable_output,
          outputs=addresses,
      )


  ''' MAIN FUNCTION '''


  def main():
      try:
          return_results(return_subnet_addresses_command(demisto.args()))
      except Exception as ex:
          demisto.error(traceback.format_exc())
          return_error(f'Failed to execute IPCalcReturnSubnetAddresses. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('IPCalcReturnSubnetAddresses', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
