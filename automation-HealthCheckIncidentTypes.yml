comment: "Identify custom and detached system incidents type  \nChecking if 'Auto
  Extraction' is turned on for:\nExtract from all\nExtract from specific indicators
  doesn't have any settings."
commonfields:
  id: HealthCheckIncidentTypes
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 3.0.1
    packID: HealthCheck
    packName: System Diagnostics and Health Check
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.111526
enabled: true
engineinfo: {}
mainengineinfo: {}
name: HealthCheckIncidentTypes
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('HealthCheckIncidentTypes', 'start', __line__())
  demisto.debug('pack name = System Diagnostics and Health Check, pack version = 3.0.1')




  def filter_non_locked(res):
      nonLockedTypes = list(filter(lambda x: x['locked'] is False or x['detached'] is True, res))
      return nonLockedTypes


  def main():
      incident = demisto.incidents()[0]
      account_name = incident.get('account')
      account_name = f"acc_{account_name}" if account_name != "" else ""

      res = execute_command(
          "core-api-get",
          {
              "uri": f"{account_name}/incidenttype"
          })['response']

      nonLockedTypes = filter_non_locked(res)

      table = []
      for incident_type in nonLockedTypes:
          newEntry = {}
          extract_settings = incident_type['extractSettings']
          if extract_settings['mode'] == 'All':
              newEntry['incidenttype'] = incident_type['prevName']
              newEntry['detection'] = "Indicators extraction defined on all fields"
              table.append(newEntry)
          elif extract_settings['mode'] == 'Specific' and extract_settings['fieldCliNameToExtractSettings']:
              newEntry['incidenttype'] = incident_type['prevName']
              newEntry['detection'] = "No indicators extraction defined on all fields"
              table.append(newEntry)
          else:
              continue
      execute_command("setIncident", {"healthcheckautoextractionbasedincidenttype": table})


  if __name__ in ('__builtin__', 'builtins', '__main__'):
      main()

  register_module_line('HealthCheckIncidentTypes', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
