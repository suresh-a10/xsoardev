args:
- description: The owner email to set as the user principal name. If a user associated
    with this email exists in Microsoft Sentinel, their full name and details will
    be displayed and mirrored in the remote system. If no such user exists, only the
    email will be displayed and mirrored, with all other details remaining null.
  name: user_principal_name
  required: true
- description: The ID of the remote incident to update. Relevant only when the script
    is called directly from the War Room.
  name: incident_id
comment: This script can be run from the War Room or used by a layout to set the Owner
  field in Microsoft Sentinel.
commonfields:
  id: MicrosoftSentinelSetOwner
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 1.5.55
    packID: AzureSentinel
    packName: Microsoft Sentinel
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.115887
engineinfo: {}
mainengineinfo: {}
name: MicrosoftSentinelSetOwner
outputs:
- contextPath: AzureSentinel.Incident.ID
  description: The incident ID.
  type: String
- contextPath: AzureSentinel.Incident.Title
  description: The incident's title.
  type: String
- contextPath: AzureSentinel.Incident.Description
  description: Description of the incident.
  type: String
- contextPath: AzureSentinel.Incident.Severity
  description: The incident severity.
  type: String
- contextPath: AzureSentinel.Incident.Status
  description: The incident status.
  type: String
- contextPath: AzureSentinel.Incident.AssigneeName
  description: The name of the incident assignee.
  type: String
- contextPath: AzureSentinel.Incident.AssigneeEmail
  description: The email address of the incident assignee.
  type: String
- contextPath: AzureSentinel.Incident.AssigneeObjectID
  description: The object ID of the incident assignee.
  type: string
- contextPath: AzureSentinel.Incident.AssigneeUPN
  description: The user principal name of the incident assignee.
  type: string
- contextPath: AzureSentinel.Incident.Label.Name
  description: The name of the incident label.
  type: String
- contextPath: AzureSentinel.Incident.Label.Type
  description: The incident label type.
  type: String
- contextPath: AzureSentinel.Incident.FirstActivityTimeUTC
  description: The date and time of the incident's first activity.
  type: Date
- contextPath: AzureSentinel.Incident.LastActivityTimeUTC
  description: The date and time of the incident's last activity.
  type: Date
- contextPath: AzureSentinel.Incident.LastModifiedTimeUTC
  description: The date and time the incident was last modified.
  type: Date
- contextPath: AzureSentinel.Incident.CreatedTimeUTC
  description: The date and time the incident was created.
  type: Date
- contextPath: AzureSentinel.Incident.IncidentNumber
  description: The incident number.
  type: Number
- contextPath: AzureSentinel.Incident.AlertsCount
  description: The number of alerts in the incident.
  type: Number
- contextPath: AzureSentinel.Incident.BookmarkCount
  description: The number of bookmarks in the incident.
  type: Number
- contextPath: AzureSentinel.Incident.CommentCount
  description: The number of comments in the incident.
  type: Number
- contextPath: AzureSentinel.Incident.AlertProductNames
  description: The alert product names of the incident.
  type: String
- contextPath: AzureSentinel.Incident.Tactics
  description: The incident's tactics.
  type: String
- contextPath: AzureSentinel.Incident.FirstActivityTimeGenerated
  description: The incident's generated first activity time.
  type: Date
- contextPath: AzureSentinel.Incident.LastActivityTimeGenerated
  description: The incident's generated last activity time.
  type: Date
- contextPath: AzureSentinel.Incident.Etag
  description: The Etag of the incident.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('MicrosoftSentinelSetOwner', 'start', __line__())
  demisto.debug('pack name = Microsoft Sentinel, pack version = 1.5.55')




  def set_owner(context_results: dict):
      """
      Updates the owner of an Azure Sentinel incident and returns the results.

      Args:
          context_results (dict): Contains incident details including "CustomFields" with "sourceid" for the incident ID
                                  and "labels" with an "Instance" type label for the instance name.

      Returns:
          CommandResults: Includes a markdown-formatted string with the updated owner details,
                           and the updated owner information.
      """
      args = demisto.args()
      incident_id = args.get("incident_id") or dict_safe_get(
          context_results, ["CustomFields", "sourceid"], ""
      )
      instance_name = context_results.get("sourceInstance") or args.get("using")
      user_principal_email = args.get("user_principal_name")
      if not instance_name:
          return_error(
              message="Missing instance name. \
                  Make sure to provide a non-empty 'using' argument when executing the script from the War Room."
          )
      if not user_principal_email:
          return_error(
              message="Please provide a not empty 'user_principal_name' as an argument when executing the script from the War Room."
          )
      if not incident_id:
          return_error(
              message="""The specified 'incident_id' was not found.
              Please ensure you provide a valid 'incident_id' as an argument when executing the script from the War Room."""
          )

      result = execute_command(
          "azure-sentinel-update-incident",
          {
              "using": instance_name,
              "incident_id": incident_id,
              "user_principal_name": user_principal_email,
          },
      )
      demisto.info(
          f"Assigned remote incident owner: Incident ID {incident_id}, \
              Instance Name {instance_name}, Owner Email {user_principal_email}."
      )
      return result


  def main():  # pragma: no cover
      context = dict_safe_get(demisto.callingContext, ["context", "Incidents", 0], {})

      if not context:
          return_error("No data to present")

      return_results(set_owner(context))


  if __name__ in ("__main__", "__builtin__", "builtins"):
      main()

  register_module_line('MicrosoftSentinelSetOwner', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
