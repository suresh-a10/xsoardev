comment: Returns a list of all the users marked as away in Cortex XSOAR.
commonfields:
  id: a1f4d180-0a62-4f4d-8c9f-657dda68fd65
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.8.24399
enabled: true
engineinfo: {}
mainengineinfo: {}
name: GetAwayUsers_Dashboard
outputs:
- contextPath: AwayUsers.id
  description: Away user ID.
  type: String
- contextPath: AwayUsers.username
  description: Away user username.
  type: String
- contextPath: AwayUsers.name
  description: Away user name.
  type: String
- contextPath: AwayUsers.phone
  description: Away user phone.
  type: String
- contextPath: AwayUsers.roles
  description: Away user roles.
  type: Unknown
- contextPath: AwayUsers.email
  description: Away user email.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |2



  def main():
      try:
          users_command_response: Dict = demisto.executeCommand("getUsers", {})
          if is_error(users_command_response) or not users_command_response:
              raise DemistoException(f'Could not retrieve users\nError details: {get_error(users_command_response)}')
          users_info: List[Dict] = users_command_response[0]['Contents']
          away_users = [user for user in users_info if user.get('isAway', True)]
          outputs = [
              {k: v for k, v in away_user.items() if k in ['username', 'email', 'phone', 'roles']}
              for away_user in away_users]
          table_name = 'Away Users'
          readable_output = tableToMarkdown(table_name, outputs, headers=list(outputs[0].keys()) if outputs else None)
          cmd_results = {
              'Type': entryTypes['note'],
              'ContentsFormat': formats['markdown'],
              'Contents': readable_output
          }
          return_results(cmd_results)
      except Exception as e:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute GetAwayUsers. Error: {str(e)}')


  ''' ENTRY POINT '''

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()
scripttarget: 0
subtype: python3
tags:
- widget
type: python
