args:
- description: List of entries to extract additional data from.
  isArray: true
  name: enrich
- description: |
    Primary key in the enrichment entries to match against primary key in the attribution data structure.
  name: enrich_key
  required: true
- description: Current attribution data structure.
  isArray: true
  name: current
- description: What attribution structure to enrich.
  name: type
  predefined:
  - IP
  - Device
  - User
  required: true
- description: comma separated list of fields to take enrichment details from
  name: enrich_fields
  required: true
comment: |
  This script can be used to enrich context generated by ExpanseAggregateAttribution* scripts  with additional details
commonfields:
  id: ExpanseEnrichAttribution
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.10.54
    packID: ExpanseV2
    packName: Cortex Xpanse by Palo Alto Networks
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.10.13.87159
engineinfo: {}
mainengineinfo: {}
name: ExpanseEnrichAttribution
outputs:
- contextPath: Expanse.AttributionIP.ip
  description: IP address
  type: string
- contextPath: Expanse.AttributionIP.private
  description: Is the IP private?
  type: boolean
- contextPath: Expanse.AttributionIP.sightings
  description: Number of sessions seen on this device
  type: number
- contextPath: Expanse.AttributionDevice.serial
  description: Serial Number of the device
  type: string
- contextPath: Expanse.AttributionDevice.vsys
  description: VSYS of the device
  type: string
- contextPath: Expanse.AttributionDevice.device-group
  description: Device Group inside Panorama
  type: string
- contextPath: Expanse.AttributionDevice.exposing_service
  description: Is the device exposing the asset?
  type: boolean
- contextPath: Expanse.AttributionDevice.sightings
  description: Number of sessions seen on this device
  type: number
- contextPath: Expanse.AttributionUser.username
  description: Username of the user
  type: string
- contextPath: Expanse.AttributionUser.domain
  description: Domain of the user
  type: string
- contextPath: Expanse.AttributionUser.groups
  description: List of groups the user is member of
- contextPath: Expanse.AttributionUser.display-name
  description: Display Name
  type: string
- contextPath: Expanse.AttributionUser.description
  description: Description of the user
  type: string
- contextPath: Expanse.AttributionUser.sightings
  description: Number of sessions seen on this device
  type: number
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ExpanseEnrichAttribution', 'start', __line__())
  ### pack version: 1.10.54




  from typing import Dict, Any, List, Optional


  ''' COMMAND FUNCTION '''


  def enrich(current_list: List[Dict[str, Any]], enrich_list: List[Dict[str, Any]], enrich_key: str,
             enrich_fields: List[str], key_field: str, outputs_prefix: str) -> CommandResults:
      for enrich_entry in enrich_list:
          key = enrich_entry.get(enrich_key, None)
          if key is None:
              continue

          for current_entry in current_list:
              current_key = current_entry[key_field].lower()
              if isinstance(key, list):
                  if next((k for k in key if k.lower() == current_key), None) is None:
                      continue
              else:
                  if current_key != key.lower():
                      continue

              for enrich_field in enrich_fields:
                  new_enrich_field = enrich_field
                  if '=' in enrich_field:
                      enrich_field, new_enrich_field = enrich_field.split('=', 1)

                  if enrich_field not in enrich_entry:
                      continue

                  enrich_value = enrich_entry[enrich_field]
                  if isinstance(enrich_value, list) and len(enrich_value) == 1:
                      enrich_value = enrich_value[0]

                  current_entry[new_enrich_field] = enrich_value

      return CommandResults(
          outputs_prefix=outputs_prefix,
          outputs_key_field=key_field,
          outputs=current_list if len(current_list) > 0 else None,
          readable_output=""
      )


  def enrich_command(args: Dict[str, Any]) -> CommandResults:
      type_: Optional[str]
      if (type_ := args.get("type")) is not None:
          type_ = type_.lower()

      current_list = argToList(args.get('current', []))
      enrich_list = argToList(args.get('enrich', []))
      enrich_key = args.get('enrich_key', "")
      enrich_fields = argToList(args.get('enrich_fields', []))

      if type_ == "ip":
          return enrich(
              current_list,
              enrich_list,
              enrich_key,
              enrich_fields,
              key_field="ip",
              outputs_prefix="Expanse.AttributionIP")
      elif type_ == "device":
          return enrich(
              current_list,
              enrich_list,
              enrich_key,
              enrich_fields,
              key_field="serial",
              outputs_prefix="Expanse.AttributionDevice")
      elif type_ == "user":
          return enrich(
              current_list,
              enrich_list,
              enrich_key,
              enrich_fields,
              key_field="username",
              outputs_prefix="Expanse.AttributionUser")

      raise ValueError("Invalid value for type argument")


  ''' MAIN FUNCTION '''


  def main():
      try:
          enrich_result = enrich_command(demisto.args())
          return_results(enrich_result)
      except Exception as ex:
          return_error(f'Failed to execute ExpanseEnrichAttribution. Error: {str(ex)}')


  ''' ENTRY POINT '''


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('ExpanseEnrichAttribution', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags: []
type: python
