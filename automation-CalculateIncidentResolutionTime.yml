args:
- name: start_time
  required: true
- name: end_time
  required: true
- name: subtract_time
  required: true
commonfields:
  id: ed0de226-4b4c-47b8-83f7-25b6234e86b5
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: Incident Management Contribution Pack
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: CalculateIncidentResolutionTime
pswd: ""
runas: DBotWeakRole
runonce: false
script: |-
  import dateparser
  import pytz
  from datetime import datetime, timedelta
  def convert_to_ist(time_str):
     # Convert any given time to Asia/Kolkata timezone
     date = dateparser.parse(time_str)
     if date is None:
         raise ValueError(f"Could not parse time: {time_str}")
     ist_timezone = pytz.timezone('Asia/Kolkata')
     return date.astimezone(ist_timezone)
  def subtract_time_from_date(date, time_str):
     # Convert the time to be subtracted into a timedelta object
     subtract_time = dateparser.parse(time_str)
     if subtract_time is None:
         raise ValueError(f"Could not parse subtracted time: {time_str}")
     # Calculate the timedelta to subtract
     time_to_subtract = subtract_time - datetime(1970, 1, 1)
     # Subtract the timedelta from the date
     return date - time_to_subtract
  def calculate_time_difference(start_time_str, end_time_str, subtract_time_str):
     # Convert start and end times to IST
     start_time = convert_to_ist(start_time_str)
     end_time = convert_to_ist(end_time_str)
     # Subtract the subtracted_time from both start and end times if provided
     if subtract_time_str:
         start_time = subtract_time_from_date(start_time, subtract_time_str)
         end_time = subtract_time_from_date(end_time, subtract_time_str)
     # Calculate the difference
     time_difference = end_time - start_time
     # Get the difference in days, hours, minutes, and seconds
     days_difference = time_difference.days
     remaining_seconds = time_difference.seconds
     hours_difference = remaining_seconds // 3600
     minutes_difference = (remaining_seconds % 3600) // 60
     seconds_difference = remaining_seconds % 60
     # Format the result string
     result_string = (f"{days_difference} day{'s' if days_difference != 1 else ''}, "
                      f"{hours_difference} hour{'s' if hours_difference != 1 else ''}, "
                      f"{minutes_difference} minute{'s' if minutes_difference != 1 else ''}, "
                      f"and {seconds_difference} second{'s' if seconds_difference != 1 else ''}")
     return {
         "Date_Time_difference": result_string

     }
  def main():
     # Fetch the arguments
     start_time_str = demisto.args().get('start_time')
     end_time_str = demisto.args().get('end_time')
     subtract_time_str = demisto.args().get('subtract_time', '')
     if not start_time_str or not end_time_str:
         return_error("Both 'start_time' and 'end_time' arguments are required")
     try:
         result = calculate_time_difference(start_time_str, end_time_str, subtract_time_str)

         demisto.setContext("IncidentResolutionTime", result)

         return_results(result)
     except Exception as e:
         return_error(f"Failed to calculate time difference: {str(e)}")
  if __name__ in ('__main__', '__builtin__', 'builtins'):
     main()
scripttarget: 0
subtype: python3
tags: []
type: python
