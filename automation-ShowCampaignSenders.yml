comment: Displays the phishing campaign senders' email addresses and the number of
  incidents each email address appears in.
commonfields:
  id: ShowCampaignSenders
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 3.4.12
    packID: Campaign
    packName: Phishing Campaign
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3:3.11.10.115186
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ShowCampaignSenders
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ShowCampaignSenders', 'start', __line__())
  demisto.debug('pack name = Phishing Campaign, pack version = 3.4.12')


  from collections import Counter


  FROM_FIELD = 'emailfrom'


  def get_incident_ids() -> list | None:
      """
      Gets all the campaign incident ids.

      Returns:
          List of all the ids.
      """
      incidents = demisto.get(demisto.context(), "EmailCampaign.incidents")
      return [incident["id"] for incident in incidents] if incidents else None


  def get_campaign_senders(incident_ids: list[str]) -> str:
      """
      Gets the campaign senders in a readable table.

      Args:
          incident_ids: All the campaign incident ids.
      Returns:
          MD table of the senders and their amount.
      """
      res = demisto.executeCommand(
          'GetIncidentsByQuery', {'query': f"id:({' '.join(incident_ids)})"}
      )

      if isError(res):
          return_error(f'Error occurred while trying to get incidents by query: {get_error(res)}')

      incidents_from_query = json.loads(res[0]['Contents'])

      if not incidents_from_query:
          return 'No incidents found.'

      senders = [incident[FROM_FIELD] for incident in incidents_from_query if FROM_FIELD in incident]

      if not senders:
          return 'No incident senders found.'

      senders_counter = Counter(senders).most_common()  # type: ignore

      senders_table_content = [{"Email": email, "Number Of Appearances": count} for email, count in senders_counter]
      headers = ['Email', 'Number Of Appearances']

      return tableToMarkdown('', senders_table_content, headers=headers)


  def main():
      try:
          if incident_ids := get_incident_ids():
              campaign_senders = get_campaign_senders(incident_ids)
              return_results(CommandResults(readable_output=campaign_senders, raw_response=campaign_senders))
          else:
              return_results(CommandResults(
                  content_format='html',
                  raw_response=(
                      "<div style='text-align:center; font-size:17px; padding: 15px;'>Senders"
                      "</br> <div style='font-size:20px;'> No incident senders found.</div></div>"
                  )
              ))

      except Exception as err:
          return_error(str(err))


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('ShowCampaignSenders', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- dynamic-section
type: python
