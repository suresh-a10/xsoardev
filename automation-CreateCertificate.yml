args:
- description: Password to protect the certificate.
  name: password
  required: true
  secret: true
- defaultValue: "365"
  description: Number of days the certificate is available. Default is "365".
  name: days
  required: true
- description: A friendly name to identify the certificate.
  name: friendly_name
- description: Country of the certificate issuer.
  name: country
- description: State or province of the certificate issuer.
  name: state_or_province
comment: Creates a public key (.cer file), a private key (.pfx) file, and a Base64
  encoded private key to use to authenticate the EWS Extension Online Powershell v2
  integration.
commonfields:
  id: CreateCertificate
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.5.0
    itemVersion: 1.5.1
    packID: MicrosoftExchangeOnline
    packName: Microsoft Exchange Online
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/pwsh-exchange:1.0.0.88372
engineinfo: {}
mainengineinfo: {}
name: CreateCertificate
outputs:
- contextPath: Certificate.PublicKey
  description: The .cer file to add to the Azure app.
  type: String
- contextPath: Certificate.PrivateKey
  description: The binary certificate (.pfx file).
  type: String
- contextPath: Certificate.PrivateKeyBase64
  description: The private key encoded in Base64 to use in the integration parameter.
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |-
  ### pack version: 1.5.1
  Import-Module SelfSignedCertificate

  function CreateCertificate
  {
      [CmdletBinding()]
      Param(
          [Parameter(Mandatory)]
          [String]$OutputPath,
          [Parameter(Mandatory)]
          [SecureString]$Password,
          [Parameter(Mandatory)]
          [int]$Days,

          [String]$FriendlyName,
          [String]$Country,
          [String]$StateOrProvince
      )
      $cmd_args = @{
          "OutCertPath" = $OutputPath
          "NotAfter" = (Get-Date).AddDays($Days)
          "Password" = $Password
      }
      if (![string]::IsNullOrEmpty($FriendlyName)){
          $cmd_args.FriendlyName = $FriendlyName
      }
      if (![string]::IsNullOrEmpty($Country)){
          $cmd_args.Country = $Country
      }
      if (![string]::IsNullOrEmpty($StateOrProvince)){
          $cmd_args.StateOrProvince = $StateOrProvince
      }

      New-SelfSignedCertificate @cmd_args -WarningAction:SilentlyContinue > $null
  }

  function Main()
  {
      [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingConvertToSecureStringWithPlainText', '')]
      param()
      $pfx_path = "certificate.pfx"
      $b64_path = "certificateBase64.txt"
      $public_key_cert_path = "publickey.cer"
      $dargs = $demisto.Args()
      $plain_pass = $dargs.password
      $password = (ConvertTo-SecureString -String $plain_pass -AsPlainText -Force)
      try
      {
          CreateCertificate -OutputPath $pfx_path -Password $password -Days $dargs.days -FriendlyName $dargs.friendly_name -Country $dargs.country -StateOrProvince $dargs.state_or_province
          openssl pkcs12 -in $pfx_path -out $public_key_cert_path -nokeys -clcerts -password pass:$plain_pass | Out-Null
          $File = [System.IO.File]::ReadAllBytes($pfx_path);
          # returns the base64 string
          $base_64_encoded = [System.Convert]::ToBase64String($File);

          $unique = $demisto.UniqueFile()
          $b64_temp_path = $demisto.Investigation().id + "_" + $unique
          [System.IO.File]::WriteAllText($b64_temp_path, $base_64_encoded)

          $demisto.Results(
                  @{
                      "Contents" = ''
                      "ContentsFormat" = [EntryFormats]::text.ToString()
                      "Type" = 3
                      "File" = $b64_path
                      "FileID" = $unique
                  }
          )

          $unique = $demisto.UniqueFile()

          $public_key_content = [System.IO.File]::ReadAllText($public_key_cert_path)
          $public_key_temp_path = $demisto.Investigation().id + "_" + $unique
          [System.IO.File]::WriteAllText($public_key_temp_path, $public_key_content)
          $demisto.Results(
                  @{
                      "Contents" = ''
                      "ContentsFormat" = [EntryFormats]::text.ToString()
                      "Type" = 3
                      "File" = $public_key_cert_path
                      "FileID" = $unique
                  }
          )

          $pfx_content = [System.IO.File]::ReadAllBytes($pfx_path)
          $unique = $demisto.UniqueFile()
          $pfx_content_temp_path = $demisto.Investigation().id + "_" + $unique
          [System.IO.File]::WriteAllBytes($pfx_content_temp_path, $pfx_content)
          $demisto.Results(
                  @{
                      "Contents" = ''
                      "ContentsFormat" = [EntryFormats]::text.ToString()
                      "Type" = 3
                      "File" = $pfx_path
                      "FileID" = $unique
                  }
          )
          $context = @{
              "Certificate" = @{
                  "PrivateKey" = $pfx_path
                  "PublicKey" = $public_key_cert_path
                  "PrivateKeyBase64" = $b64_path
              }
          }
          $readable_output = TableToMarkdown $context.Certificate "Use those certificates to connect to the desired service."
          ReturnOutputs $readable_output $context $null | Out-Null
      }
      finally
      {
          Remove-Item -Path $pfx_path, $public_key_cert_path | Out-Null
      }
  }

  if ($MyInvocation.ScriptName -notlike "*.tests.ps1" -AND -NOT$Test)
  {
      Main
  }
scripttarget: 0
system: true
tags:
- basescript
type: powershell
