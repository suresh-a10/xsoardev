commonfields:
  id: 56eba952-9ef5-4334-8911-7dfb1a7e4732
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: AX_Report_WIP
pswd: ""
runas: DBotWeakRole
runonce: false
script: |+
  import requests
  from requests.auth import HTTPBasicAuth
  import ssl
  import json
  from pprint import pprint
  import os
  # import http.client


  url = 'https://10.41.5.42/wsapis/v2.0.0/'
  loginurl=url+'auth/login'
  logouturl=url+'auth/logout'
  requrl=url+'reports/report'

  res = demisto.executeCommand("fetch-credentials", {'using':'Credentials TCS_instance_1'})

  username = res[0]['Contents']['username']
  password = res[0]['Contents']['password']

  with requests.Session() as session:
      # session = requests.Session()
      session.trust_env = False
      session.verify = False
      session.headers = {

          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36',
          'Content-Type': 'application/json'
      }
      response= session.post(loginurl,json={'username':username,
          'password':password})
      demisto.results(response)
      # token=response.json().get('token')

      # session.headers.update({
      #     'Authorization': 'Bearer ' + token
      # })

      resp=session.get(requrl,params={
        "report_type":"alertDetailsReport",
        "infection_id": 2924,          #submission_id,
        "infection_type":"malware-object"
      })

      # demisto.results(resp.json())
      demisto.results(resp)



  #     var httpParams = {
  #       Method: method,
  #       Body: (method === ('POST' && args) ? encodeToURLQuery(args).replace(/^\?/, '') : undefined)
  #     };
  #     if (params.clientToken) {
  #         headers['X-FeClient-Token'] = [params.clientToken];
  #     }
  #     if (token) {
  #       headers['X-FeApi-Token'] = token;
  #     } else {
  #       httpParams.Username = params.credentials.identifier;
  #       httpParams.Password = params.credentials.password;
  #     }
  #     full_url = server + url + (method === 'GET' && method ? encodeToURLQuery(args) : '')
  #     logDebug('Using the following url: ' + full_url);
  #     httpParams.Headers = headers;
  #     var res = http(
  #             full_url,
  #             httpParams,
  #             params.insecure,
  #             params.proxy
  #         );
  #     if (res.StatusCode < 200 || res.StatusCode >= 300) {
  #         if (url !== commandDictionary.login.url && url !== commandDictionary.logout.url) {
  #           sendRequest(commandDictionary.logout.url, commandDictionary.logout.method, token);
  #         }
  #         throw 'Request submissions failed, request status code: ' + res.StatusCode + ' and Body: ' + res.Body + '.';
  #     }
  #     return res;
  # }


  # token = sendRequest('auth/login', 'POST').Headers['X-Feapi-Token'];

  # var result;

  # switch (command) {
  #     case 'test-module':
  #         sendRequest(commandDictionary.logout.url, commandDictionary.logout.method, token);
  #         return 'ok';
  #     case 'fe-report':
  #         var response = sendRequest(commandDictionary[command].url, commandDictionary[command].method, token, commandDictionary[command].setContentType, args);
  #         var filename = getFileName(args);
  #         result = {Type: 9, FileID: saveFile(response.Bytes), File: filename, Contents: filename};
  #         break;
  #     case 'fe-submit':
  #         if (args.profiles) {
  #             args.profiles = args.profiles.split(',');
  #             for (var k in args.profiles) {
  #               args.profiles[k] = args.profiles[k].trim();
  #             }
  #         }
  #         id = args.upload || args.uploadFile;
  #         delete(args.upload)
  #         delete(args.uploadFile)
  #         res = httpMultipart(
  #              server + 'submissions',
  #              id,
  #              {
  #                  Headers: {
  #                     'X-FeClient-Token': params.clientToken ? [params.clientToken] : undefined,
  #                     'X-FeApi-Token': token,
  #                     'Accept': ['*/*']
  #                  },
  #              },
  #              {
  #                 'options': JSON.stringify(args)
  #              },
  #              params.insecure,
  #              params.proxy,
  #              undefined,
  #              'filename'
  #          );
  #          if (res.StatusCode < 200 || res.StatusCode >= 300) {
  #           sendRequest(commandDictionary.logout.url, commandDictionary.logout.method, token);
  #           throw 'Request submissions failed, request status code: ' + res.StatusCode + ' and Body: ' + res.Body + '.';
  #           }
  #           result = JSON.parse(res.Body);
  #           break;
  #     case 'fe-submit-url':
  #         var profiles = args.profiles.split(',');
  #         var urls = args.urls.split(',');
  #         var res = http(
  #             server + 'submissions/url',
  #             {
  #                 Method: 'POST',
  #                 Headers: {'Content-Type': ['application/json'],'X-FeApi-Token': token},
  #                 Body: JSON.stringify({"timeout":args.timeout, "priority":args.priority, "profiles":profiles, "application":args.application, "force":args.force, "analysistype":args.analysistype, "prefetch":args.prefetch, "urls":urls})
  #             },
  #             params.insecure,
  #             params.proxy
  #          );
  #         if (res.StatusCode < 200 || res.StatusCode >= 300 || res.success === false) {
  #             throw 'FireEye URL Submission Request Failed.\nStatus code: ' + res.StatusCode + '.\nBody: ' + res.Body + '.';
  #         }
  #         result = JSON.parse(res.Body);
  #         break;

  #     case 'fe-submit-status':
  #         submissionKeyList = argToList(args.submission_Key);
  #         result = [];
  #         method = commandDictionary[command].method;
  #         setContentType = commandDictionary[command].setContentType;

  #         for (var i=0; i < submissionKeyList.length; i++) {
  #             url = commandDictionary[command].url + '/' + submissionKeyList[i];

  #             response = sendRequest(url, method, token, setContentType);
  #             status_result = response.Body;

  #             contentType = response.Headers && response.Headers['Content-Type'] && response.Headers['Content-Type'][0];
  #             if (contentType && contentType.indexOf('application/json') !== -1) {
  #               status_result = JSON.parse(response.Body);
  #             }
  #             if (contentType && contentType.indexOf('application/xml') !== -1) {
  #               status_result = JSON.parse(x2j(response.Body));
  #             }
  #             status_result['submission_Key'] = submissionKeyList[i];
  #             result.push(status_result)
  #         }
  #         break;

  #     default:
  #         response = sendRequest(replaceInTemplatesAndRemove(commandDictionary[command].url, args), commandDictionary[command].method, token, commandDictionary[command].setContentType, args);
  #         result = response.Body;
  #         contentType = response.Headers && response.Headers['Content-Type'] && response.Headers['Content-Type'][0];
  #         if (contentType && contentType.indexOf('application/json') !== -1) {
  #           result = JSON.parse(response.Body);
  #         }
  #         if (contentType && contentType.indexOf('application/xml') !== -1) {
  #           result = JSON.parse(x2j(response.Body));
  #         }
  # }
  # sendRequest(commandDictionary.logout.url, commandDictionary.logout.method, token);

scripttarget: 0
subtype: python3
tags: []
type: python
