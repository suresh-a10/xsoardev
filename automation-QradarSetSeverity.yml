args:
- name: value
commonfields:
  id: 2d56335c-0a55-49e6-8466-ecab6e4f6ff9
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    packName: ""
    prevname: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.10.8.39276
enabled: true
engineinfo: {}
mainengineinfo: {}
name: QradarSetSeverity
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  qradarSeverity = demisto.args()["value"]
  outputSeverity = "Low"
  severity = 1
  #assume that qradar sev is int
  try:
      qradarSeverity = int(qradarSeverity)
  except:
      qradarSeverity = int(qradarSeverity.replace("P",""))
      qradarSeverity = 11 - qradarSeverity*2
  if qradarSeverity < 5:
      outputSeverity = "Low"
      severity = 1
  elif qradarSeverity < 7:
      outputSeverity = "Medium"
      severity = 2
  elif qradarSeverity < 9:
      outputSeverity = "High"
      severity = 3
  else:
      outputSeverity = "Critical"
      severity = 4
  demisto.executeCommand("setIncident", {"initialseverity":outputSeverity})
  outputSeverity = {'outputSeverity': outputSeverity}
  result = {"Type": entryTypes["note"],
    "ContentsFormat": formats["text"],
    "Contents": {"severity": severity},
    "HumanReadable": "The severity is: "+str(severity),
    "EntryContext": {"severity": severity}
   }
  demisto.results(severity)
  demisto.setContext('customerSeverity', outputSeverity)
scripttarget: 0
subtype: python3
tags:
- transformer
- Utility
type: python
