args:
- description: CSV list of entry ids for the files to zip.
  isArray: true
  name: entryID
  required: true
- description: 'Name of the output file, for example: zipName="test" would result
    in output file "test.zip".'
  name: zipName
- description: 'Used to create a password protected zip file. Example: password="abcd".'
  name: password
comment: Zip a file and upload to war room.
commonfields:
  id: ZipFile
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.15.76
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/py3-tools:1.0.0.95440
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ZipFile
outputs:
- contextPath: ZipFile.ZippedFile
  description: The zipped file.
  type: string
- contextPath: File.Name
  description: The full file name (including file extension).
  type: String
- contextPath: File.EntryID
  description: The ID for locating the file in the War Room.
  type: String
- contextPath: File.Size
  description: The size of the file in bytes.
  type: Number
- contextPath: File.MD5
  description: The MD5 hash of the file.
  type: String
- contextPath: File.SHA1
  description: The SHA1 hash of the file.
  type: String
- contextPath: File.SHA256
  description: The SHA1 hash of the file.
  type: String
- contextPath: File.SHA512
  description: The SHA512 hash of the file.
  type: String
- contextPath: File.SSDeep
  description: The ssdeep hash of the file (same as displayed in file entries).
  type: String
- contextPath: File.Extension
  description: 'The file extension, for example: ''xls''.'
  type: String
- contextPath: File.Type
  description: The file type, as determined by libmagic (same as displayed in file
    entries).
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('ZipFile', 'start', __line__())
  demisto.debug('pack name = Common Scripts, pack version = 1.15.76')




  import re
  import shutil
  import pyzipper
  from os.path import isfile

  ESCAPE_CHARACTERS = r'[/\<>"|?*]'


  def test_compression_succeeded(zip_name: str, password: str = None):
      with pyzipper.AESZipFile(zip_name) as zf:
          # testing for file integrity
          if password:
              zf.setpassword(bytes(password, 'utf-8'))
          ret = zf.testzip()
          if ret is not None:
              demisto.info('zf.testzip() failed')
              raise DemistoException('There was a problem with zipping the file: ' + ret + ' is corrupted')


  def compress_multiple(file_names: List[str], zip_name: str, password: str = None):
      """
      Compress multiple files into a zip file.
      :param file_names: list of file names to compress
      :param zip_name: name of the zip file to create
      :param password: password to use for encryption
      """
      compression = pyzipper.ZIP_DEFLATED
      encryption = pyzipper.WZ_AES if password else None
      demisto.debug(f'zipping {file_names=}')
      with pyzipper.AESZipFile(zip_name, mode='w', compression=compression, encryption=encryption) as zf:
          zf.pwd = bytes(password, 'utf-8') if password else None
          for file_name in file_names:
              zf.write(file_name)
      test_compression_succeeded(zip_name, password)
      zf.close()


  def escape_illegal_characters_in_file_name(file_name: str) -> str:
      if file_name:
          file_name = re.sub(ESCAPE_CHARACTERS, '-', file_name)
          file_name = re.sub(r'-+', '-', file_name)  # prevent more than one consecutive dash in the file name

      return file_name


  def main():
      try:
          args = demisto.args()
          zipName = None
          password = None
          fileEntryID = args.get('entryID')

          if 'zipName' in args:
              zipName = escape_illegal_characters_in_file_name(demisto.args().get('zipName')) + '.zip'

          if 'password' in args:
              password = demisto.args().get('password')

          if not fileEntryID:
              raise DemistoException('You must set an entryID when using the zip script')

          entry_ids = argToList(fileEntryID)
          file_names = []
          for entry_id in entry_ids:
              res = demisto.executeCommand('getFilePath', {'id': entry_id})

              if is_error(res):
                  raise DemistoException(
                      'Failed to get the file path for entry: ' + entry_id + ' the error message was ' + get_error(res))

              filePath = res[0]['Contents']['path']
              fileCurrentName = escape_illegal_characters_in_file_name(res[0]['Contents']['name'])

              if not isfile(filePath):  # in case that the user will send a directory
                  raise DemistoException(entry_id + ' is not a file. Please recheck your input.')

              # Handling duplicate names.
              if fileCurrentName in file_names:
                  name, ext = os.path.splitext(fileCurrentName)
                  i = 0
                  while fileCurrentName in file_names:
                      i += 1
                      fileCurrentName = f'{name} {i}{ext}'
              # copying the file to current location
              shutil.copy(filePath, fileCurrentName)
              file_names.append(fileCurrentName)

          if not zipName:
              # Preserving old behaviour. If only one file provided - will use its name .zip
              # Else will use a uuid.
              if len(file_names) == 1:
                  fileCurrentName = file_names[0]
              else:
                  fileCurrentName = demisto.uniqueFile()
              zipName = fileCurrentName + '.zip'

          # zipping the file
          compress_multiple(file_names, zipName, password)

          with open(zipName, 'rb') as f:
              file_data = f.read()

          demisto.results(fileResult(zipName, file_data))
          human_readable = tableToMarkdown(
              'Zipped Files',
              [{'original name': file_names, 'zipped file': zipName}])
          context: Dict[str, Any] = {
              'ZippedFiles': zipName,
              'ZipFile.ZippedFile': zipName
          }
          for entry_id in entry_ids:
              context[f'File(val.EntryID == {entry_id}).zipped'] = True
          raw_response = {'ZippedFiles': zipName}

          return_outputs(human_readable, context, raw_response)
      except Exception as exc:
          return_error(exc)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('ZipFile', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
- file
type: python
