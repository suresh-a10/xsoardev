args:
- description: Value to split.
  name: value
  required: true
- description: Delimiter to cut the string by. Pass '' to set delimiter to be empty
    string.
  name: delimiter
  required: true
- description: 'Comma separated field numbers (e.g.: 1,5,7).'
  isArray: true
  name: fields
  required: true
comment: |-
  Cut a string by delimiter and return specific fields.
  Example
  =================
  input: "A-B-C-D-E"
  delimiter: "-"
  fields: "1,5"

  return: "A-E".
commonfields:
  id: Cut
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.2.77
    packID: FiltersAndTransformers
    packName: Filters And Transformers
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
enabled: true
engineinfo: {}
mainengineinfo: {}
name: Cut
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  // pack version: 1.2.77
  function parseValue(value) {
      /* This function is a workaround for an issue where passing a date field from the context
         to the "value" argument, in JS it is accepted as an object, while in python it is a string.
         To solve this discrapancy, we ensure the value is stringified correctly before running
         the cut() function. */
      if (typeof value === "string") {
          return value;
      } else if (typeof value === "number") {
          return "" + value;
      }
      value = JSON.stringify(value);
      if (value.startsWith('"') && value.endsWith('"')) {
          // potentially a date object, wrapped with quotes
          value = value.slice(1, -1);
          try {
              Date(value);
              return value;
          } catch(e) {
              // unexpected value - will throw the error below
          }
      }
      // value type isn't supported for Cut (either a boolean or a dict)
      throw "Unsupported value for Cut: " + value;
  }

  function cut(value, fields, delim) {
      value = parseValue(value);
      if (delim === "''") {
          delim = "";
      }

      const data = value.split(delim);
      fields = fields.split(",").map(num => parseInt(num, 10));

      const maxIndex = Math.max(...fields);
      if (data.length < maxIndex) {
          throw new Error(`Invalid field index ${maxIndex}, should be between 1 to ${data.length}.`);
      }

      return fields.map(i => data[i - 1]).join(delim);
  }

  return cut(args.value, args.fields, args.delimiter);
scripttarget: 0
system: true
tags:
- transformer
- string
type: javascript
